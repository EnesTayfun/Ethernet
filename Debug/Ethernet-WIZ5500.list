
Ethernet-WIZ5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080048c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200000c0  08004988  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004988  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0b7  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ff  00000000  00000000  0002c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf6d  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b086  00000000  00000000  0004c625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4ad9  00000000  00000000  000576ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d78  00000000  00000000  0010c1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045a0 	.word	0x080045a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	080045a0 	.word	0x080045a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4604      	mov	r4, r0
 80005c0:	4608      	mov	r0, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4623      	mov	r3, r4
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	4603      	mov	r3, r0
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	460b      	mov	r3, r1
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	4613      	mov	r3, r2
 80005d4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d902      	bls.n	80005e2 <socket+0x2a>
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	e0f2      	b.n	80007c8 <socket+0x210>
	switch(protocol)
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d005      	beq.n	80005f4 <socket+0x3c>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dd11      	ble.n	8000610 <socket+0x58>
 80005ec:	3b02      	subs	r3, #2
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d80e      	bhi.n	8000610 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80005f2:	e011      	b.n	8000618 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2204      	movs	r2, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000600:	f000 fbce 	bl	8000da0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d105      	bne.n	8000616 <socket+0x5e>
 800060a:	f06f 0302 	mvn.w	r3, #2
 800060e:	e0db      	b.n	80007c8 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000610:	f06f 0304 	mvn.w	r3, #4
 8000614:	e0d8      	b.n	80007c8 <socket+0x210>
	    break;
 8000616:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <socket+0x70>
 8000622:	f06f 0305 	mvn.w	r3, #5
 8000626:	e0cf      	b.n	80007c8 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d025      	beq.n	800067a <socket+0xc2>
	{
   	switch(protocol)
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d002      	beq.n	800063a <socket+0x82>
 8000634:	2b02      	cmp	r3, #2
 8000636:	d008      	beq.n	800064a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000638:	e024      	b.n	8000684 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000640:	2b00      	cmp	r3, #0
 8000642:	d11c      	bne.n	800067e <socket+0xc6>
 8000644:	f06f 0305 	mvn.w	r3, #5
 8000648:	e0be      	b.n	80007c8 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	2b00      	cmp	r3, #0
 8000652:	d006      	beq.n	8000662 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db02      	blt.n	8000662 <socket+0xaa>
 800065c:	f06f 0305 	mvn.w	r3, #5
 8000660:	e0b2      	b.n	80007c8 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00a      	beq.n	8000682 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800066c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db06      	blt.n	8000682 <socket+0xca>
 8000674:	f06f 0305 	mvn.w	r3, #5
 8000678:	e0a6      	b.n	80007c8 <socket+0x210>
   	}
   }
 800067a:	bf00      	nop
 800067c:	e002      	b.n	8000684 <socket+0xcc>
   	      break;
 800067e:	bf00      	nop
 8000680:	e000      	b.n	8000684 <socket+0xcc>
   	      break;
 8000682:	bf00      	nop
	close(sn);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f8ac 	bl	80007e4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	3301      	adds	r3, #1
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4618      	mov	r0, r3
 8000696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800069a:	f023 030f 	bic.w	r3, r3, #15
 800069e:	b25a      	sxtb	r2, r3
 80006a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 fb2a 	bl	8000d04 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d110      	bne.n	80006d8 <socket+0x120>
	{
	   port = sock_any_port++;
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <socket+0x218>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	b291      	uxth	r1, r2
 80006be:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <socket+0x218>)
 80006c0:	8011      	strh	r1, [r2, #0]
 80006c2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80006c4:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <socket+0x218>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d103      	bne.n	80006d8 <socket+0x120>
 80006d0:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <socket+0x218>)
 80006d2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80006d6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	3301      	adds	r3, #1
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006e4:	461a      	mov	r2, r3
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	4610      	mov	r0, r2
 80006f2:	f000 fb07 	bl	8000d04 <WIZCHIP_WRITE>
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	3301      	adds	r3, #1
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000702:	461a      	mov	r2, r3
 8000704:	88bb      	ldrh	r3, [r7, #4]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	4610      	mov	r0, r2
 800070c:	f000 fafa 	bl	8000d04 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	3301      	adds	r3, #1
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f000 faf0 	bl	8000d04 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000724:	bf00      	nop
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	3301      	adds	r3, #1
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fa9a 	bl	8000c6c <WIZCHIP_READ>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f3      	bne.n	8000726 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2201      	movs	r2, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	b21b      	sxth	r3, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <socket+0x21c>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <socket+0x21c>)
 800075a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	f003 0201 	and.w	r2, r3, #1
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	b21a      	sxth	r2, r3
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <socket+0x21c>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	b21b      	sxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <socket+0x21c>)
 8000778:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2201      	movs	r2, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	b21b      	sxth	r3, r3
 8000784:	43db      	mvns	r3, r3
 8000786:	b21a      	sxth	r2, r3
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <socket+0x220>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	b21b      	sxth	r3, r3
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <socket+0x220>)
 8000796:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <socket+0x224>)
 800079c:	2100      	movs	r1, #0
 800079e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <socket+0x228>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80007aa:	bf00      	nop
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	3301      	adds	r3, #1
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fa57 	bl	8000c6c <WIZCHIP_READ>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0f3      	beq.n	80007ac <socket+0x1f4>
   return (int8_t)sn;
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200000dc 	.word	0x200000dc
 80007d8:	200000de 	.word	0x200000de
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	200000f0 	.word	0x200000f0

080007e4 <close>:

int8_t close(uint8_t sn)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d902      	bls.n	80007fa <close+0x16>
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	e055      	b.n	80008a6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	3301      	adds	r3, #1
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000806:	2110      	movs	r1, #16
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fa7b 	bl	8000d04 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800080e:	bf00      	nop
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	3301      	adds	r3, #1
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fa25 	bl	8000c6c <WIZCHIP_READ>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f3      	bne.n	8000810 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	3301      	adds	r3, #1
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000834:	211f      	movs	r1, #31
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fa64 	bl	8000d04 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2201      	movs	r2, #1
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	b21b      	sxth	r3, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	b21a      	sxth	r2, r3
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <close+0xcc>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4013      	ands	r3, r2
 8000852:	b21b      	sxth	r3, r3
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <close+0xcc>)
 8000858:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2201      	movs	r2, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	b21b      	sxth	r3, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	b21a      	sxth	r2, r3
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <close+0xd0>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	b21b      	sxth	r3, r3
 800086e:	4013      	ands	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <close+0xd0>)
 8000876:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <close+0xd4>)
 800087c:	2100      	movs	r1, #0
 800087e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <close+0xd8>)
 8000886:	2100      	movs	r1, #0
 8000888:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800088a:	bf00      	nop
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	3301      	adds	r3, #1
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f9e7 	bl	8000c6c <WIZCHIP_READ>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f3      	bne.n	800088c <close+0xa8>
	return SOCK_OK;
 80008a4:	2301      	movs	r3, #1
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000dc 	.word	0x200000dc
 80008b4:	200000de 	.word	0x200000de
 80008b8:	200000e0 	.word	0x200000e0
 80008bc:	200000f0 	.word	0x200000f0

080008c0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d902      	bls.n	80008dc <connect+0x1c>
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e0c6      	b.n	8000a6a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	3301      	adds	r3, #1
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f9c1 	bl	8000c6c <WIZCHIP_READ>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d002      	beq.n	80008fa <connect+0x3a>
 80008f4:	f06f 0304 	mvn.w	r3, #4
 80008f8:	e0b7      	b.n	8000a6a <connect+0x1aa>
   CHECK_SOCKINIT();
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	3301      	adds	r3, #1
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f9b0 	bl	8000c6c <WIZCHIP_READ>
 800090c:	4603      	mov	r3, r0
 800090e:	2b13      	cmp	r3, #19
 8000910:	d002      	beq.n	8000918 <connect+0x58>
 8000912:	f06f 0302 	mvn.w	r3, #2
 8000916:	e0a8      	b.n	8000a6a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	3201      	adds	r2, #1
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	4413      	add	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	3202      	adds	r2, #2
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	4413      	add	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	3203      	adds	r2, #3
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	4413      	add	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094e:	d002      	beq.n	8000956 <connect+0x96>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <connect+0x9c>
 8000956:	f06f 030b 	mvn.w	r3, #11
 800095a:	e086      	b.n	8000a6a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800095c:	88bb      	ldrh	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <connect+0xa8>
 8000962:	f06f 030a 	mvn.w	r3, #10
 8000966:	e080      	b.n	8000a6a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	3301      	adds	r3, #1
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000974:	2204      	movs	r2, #4
 8000976:	6839      	ldr	r1, [r7, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fa71 	bl	8000e60 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	3301      	adds	r3, #1
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800098a:	461a      	mov	r2, r3
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f000 f9b4 	bl	8000d04 <WIZCHIP_WRITE>
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3301      	adds	r3, #1
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80009a8:	461a      	mov	r2, r3
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	4610      	mov	r0, r2
 80009b2:	f000 f9a7 	bl	8000d04 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	3301      	adds	r3, #1
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009c2:	2104      	movs	r1, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f99d 	bl	8000d04 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80009ca:	bf00      	nop
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	3301      	adds	r3, #1
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f947 	bl	8000c6c <WIZCHIP_READ>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f3      	bne.n	80009cc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <connect+0x1b4>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	fa42 f303 	asr.w	r3, r2, r3
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d02b      	beq.n	8000a50 <connect+0x190>
 80009f8:	2300      	movs	r3, #0
 80009fa:	e036      	b.n	8000a6a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	3301      	adds	r3, #1
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f92f 	bl	8000c6c <WIZCHIP_READ>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00c      	beq.n	8000a32 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a24:	2108      	movs	r1, #8
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f96c 	bl	8000d04 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8000a2c:	f06f 030c 	mvn.w	r3, #12
 8000a30:	e01b      	b.n	8000a6a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	3301      	adds	r3, #1
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f914 	bl	8000c6c <WIZCHIP_READ>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8000a4a:	f06f 0303 	mvn.w	r3, #3
 8000a4e:	e00c      	b.n	8000a6a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3301      	adds	r3, #1
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f905 	bl	8000c6c <WIZCHIP_READ>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b17      	cmp	r3, #23
 8000a66:	d1c9      	bne.n	80009fc <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000dc 	.word	0x200000dc

08000a78 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d902      	bls.n	8000a9c <send+0x24>
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e0de      	b.n	8000c5a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f8e1 	bl	8000c6c <WIZCHIP_READ>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d002      	beq.n	8000aba <send+0x42>
 8000ab4:	f06f 0304 	mvn.w	r3, #4
 8000ab8:	e0cf      	b.n	8000c5a <send+0x1e2>
   CHECK_SOCKDATA();
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <send+0x4e>
 8000ac0:	f06f 030d 	mvn.w	r3, #13
 8000ac4:	e0c9      	b.n	8000c5a <send+0x1e2>
   tmp = getSn_SR(sn);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	3301      	adds	r3, #1
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f8ca 	bl	8000c6c <WIZCHIP_READ>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2b17      	cmp	r3, #23
 8000ae0:	d005      	beq.n	8000aee <send+0x76>
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b1c      	cmp	r3, #28
 8000ae6:	d002      	beq.n	8000aee <send+0x76>
 8000ae8:	f06f 0306 	mvn.w	r3, #6
 8000aec:	e0b5      	b.n	8000c5a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <send+0x1ec>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	fa42 f303 	asr.w	r3, r2, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d039      	beq.n	8000b76 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	3301      	adds	r3, #1
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8ac 	bl	8000c6c <WIZCHIP_READ>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d019      	beq.n	8000b5a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b32:	2110      	movs	r1, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f8e5 	bl	8000d04 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <send+0x1ec>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4013      	ands	r3, r2
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <send+0x1ec>)
 8000b56:	801a      	strh	r2, [r3, #0]
 8000b58:	e00d      	b.n	8000b76 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <send+0xfa>
      {
         close(sn);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fe3c 	bl	80007e4 <close>
         return SOCKERR_TIMEOUT;
 8000b6c:	f06f 030c 	mvn.w	r3, #12
 8000b70:	e073      	b.n	8000c5a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e071      	b.n	8000c5a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f872 	bl	8000c6c <WIZCHIP_READ>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	029b      	lsls	r3, r3, #10
 8000b8e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000b90:	88ba      	ldrh	r2, [r7, #4]
 8000b92:	89bb      	ldrh	r3, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d901      	bls.n	8000b9c <send+0x124>
 8000b98:	89bb      	ldrh	r3, [r7, #12]
 8000b9a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f9be 	bl	8000f20 <getSn_TX_FSR>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	3301      	adds	r3, #1
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f859 	bl	8000c6c <WIZCHIP_READ>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d009      	beq.n	8000bd8 <send+0x160>
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b1c      	cmp	r3, #28
 8000bc8:	d006      	beq.n	8000bd8 <send+0x160>
      {
         close(sn);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe09 	bl	80007e4 <close>
         return SOCKERR_SOCKSTATUS;
 8000bd2:	f06f 0306 	mvn.w	r3, #6
 8000bd6:	e040      	b.n	8000c5a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <send+0x1f0>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	fa42 f303 	asr.w	r3, r2, r3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d005      	beq.n	8000bf8 <send+0x180>
 8000bec:	88ba      	ldrh	r2, [r7, #4]
 8000bee:	89bb      	ldrh	r3, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d901      	bls.n	8000bf8 <send+0x180>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e030      	b.n	8000c5a <send+0x1e2>
      if(len <= freesize) break;
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	89bb      	ldrh	r3, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d900      	bls.n	8000c02 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000c00:	e7cc      	b.n	8000b9c <send+0x124>
      if(len <= freesize) break;
 8000c02:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000c04:	88ba      	ldrh	r2, [r7, #4]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	6839      	ldr	r1, [r7, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f9d3 	bl	8000fb6 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	3301      	adds	r3, #1
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f870 	bl	8000d04 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000c24:	bf00      	nop
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f81a 	bl	8000c6c <WIZCHIP_READ>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f3      	bne.n	8000c26 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2201      	movs	r2, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <send+0x1ec>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <send+0x1ec>)
 8000c56:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000c58:	88bb      	ldrh	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000de 	.word	0x200000de
 8000c68:	200000dc 	.word	0x200000dc

08000c6c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <WIZCHIP_READ+0x24>
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d114      	bne.n	8000cba <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	0c12      	lsrs	r2, r2, #16
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	0a12      	lsrs	r2, r2, #8
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4798      	blx	r3
 8000cb8:	e011      	b.n	8000cde <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	f107 020c 	add.w	r2, r7, #12
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4798      	blx	r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <WIZCHIP_READ+0x94>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	4798      	blx	r3
   return ret;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000004 	.word	0x20000004

08000d04 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d119      	bne.n	8000d60 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	0c12      	lsrs	r2, r2, #16
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	4610      	mov	r0, r2
 8000d38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	0a12      	lsrs	r2, r2, #8
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	4610      	mov	r0, r2
 8000d46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	4610      	mov	r0, r2
 8000d52:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4798      	blx	r3
 8000d5e:	e013      	b.n	8000d88 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f107 020c 	add.w	r2, r7, #12
 8000d82:	2104      	movs	r1, #4
 8000d84:	4610      	mov	r0, r2
 8000d86:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d8e:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <WIZCHIP_WRITE+0x98>)
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	4798      	blx	r3
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000004 	.word	0x20000004

08000da0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <WIZCHIP_READ_BUF+0x2a>
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d126      	bne.n	8000e18 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	0c12      	lsrs	r2, r2, #16
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	0a12      	lsrs	r2, r2, #8
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	4610      	mov	r0, r2
 8000de4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	4610      	mov	r0, r2
 8000df0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	82fb      	strh	r3, [r7, #22]
 8000df6:	e00a      	b.n	8000e0e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	8afa      	ldrh	r2, [r7, #22]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	188c      	adds	r4, r1, r2
 8000e02:	4798      	blx	r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000e08:	8afb      	ldrh	r3, [r7, #22]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	82fb      	strh	r3, [r7, #22]
 8000e0e:	8afa      	ldrh	r2, [r7, #22]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3f0      	bcc.n	8000df8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e16:	e017      	b.n	8000e48 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f107 0210 	add.w	r2, r7, #16
 8000e36:	2103      	movs	r1, #3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	4611      	mov	r1, r2
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e4e:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <WIZCHIP_READ_BUF+0xbc>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4798      	blx	r3
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	20000004 	.word	0x20000004

08000e60 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	0c12      	lsrs	r2, r2, #16
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	4610      	mov	r0, r2
 8000e96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	0a12      	lsrs	r2, r2, #8
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	82fb      	strh	r3, [r7, #22]
 8000eb6:	e00a      	b.n	8000ece <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	8afa      	ldrh	r2, [r7, #22]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	440a      	add	r2, r1
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000ec8:	8afb      	ldrh	r3, [r7, #22]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	82fb      	strh	r3, [r7, #22]
 8000ece:	8afa      	ldrh	r2, [r7, #22]
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3f0      	bcc.n	8000eb8 <WIZCHIP_WRITE_BUF+0x58>
 8000ed6:	e017      	b.n	8000f08 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	0c1b      	lsrs	r3, r3, #16
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	f107 0210 	add.w	r2, r7, #16
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	88fa      	ldrh	r2, [r7, #6]
 8000f02:	4611      	mov	r1, r2
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <WIZCHIP_WRITE_BUF+0xbc>)
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	4798      	blx	r3
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000004 	.word	0x20000004

08000f20 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	81fb      	strh	r3, [r7, #14]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	3301      	adds	r3, #1
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe94 	bl	8000c6c <WIZCHIP_READ>
 8000f44:	4603      	mov	r3, r0
 8000f46:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f48:	89bb      	ldrh	r3, [r7, #12]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b29c      	uxth	r4, r3
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	3301      	adds	r3, #1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe86 	bl	8000c6c <WIZCHIP_READ>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4423      	add	r3, r4
 8000f66:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01a      	beq.n	8000fa4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	3301      	adds	r3, #1
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe76 	bl	8000c6c <WIZCHIP_READ>
 8000f80:	4603      	mov	r3, r0
 8000f82:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b29c      	uxth	r4, r3
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe68 	bl	8000c6c <WIZCHIP_READ>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	4423      	add	r3, r4
 8000fa2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000fa4:	89fa      	ldrh	r2, [r7, #14]
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d1c2      	bne.n	8000f32 <getSn_TX_FSR+0x12>
   return val;
 8000fac:	89fb      	ldrh	r3, [r7, #14]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}

08000fb6 <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000fb6:	b590      	push	{r4, r7, lr}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	6039      	str	r1, [r7, #0]
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d048      	beq.n	8001066 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	3301      	adds	r3, #1
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe43 	bl	8000c6c <WIZCHIP_READ>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b29c      	uxth	r4, r3
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe36 	bl	8000c6c <WIZCHIP_READ>
 8001000:	4603      	mov	r3, r0
 8001002:	b29b      	uxth	r3, r3
 8001004:	4423      	add	r3, r4
 8001006:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	3202      	adds	r2, #2
 8001012:	00d2      	lsls	r2, r2, #3
 8001014:	4413      	add	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	461a      	mov	r2, r3
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	68b8      	ldr	r0, [r7, #8]
 8001020:	f7ff ff1e 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001024:	89fa      	ldrh	r2, [r7, #14]
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3301      	adds	r3, #1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001038:	461a      	mov	r2, r3
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f7ff fe5d 	bl	8000d04 <WIZCHIP_WRITE>
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	3301      	adds	r3, #1
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001056:	461a      	mov	r2, r3
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f7ff fe50 	bl	8000d04 <WIZCHIP_WRITE>
 8001064:	e000      	b.n	8001068 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001066:	bf00      	nop
}
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}
	...

08001070 <SPIReadWrite>:

extern SPI_HandleTypeDef hspi1;


uint8_t SPIReadWrite(uint8_t data)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800107a:	bf00      	nop
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <SPIReadWrite+0x4c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d1f8      	bne.n	800107c <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <SPIReadWrite+0x4c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	330c      	adds	r3, #12
 8001090:	79fa      	ldrb	r2, [r7, #7]
 8001092:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8001094:	bf00      	nop
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <SPIReadWrite+0x4c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d1f8      	bne.n	8001096 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SPIReadWrite+0x4c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	330c      	adds	r3, #12
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000010c 	.word	0x2000010c

080010c0 <wizchip_select>:

void  wizchip_select(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2110      	movs	r1, #16
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <wizchip_select+0x14>)
 80010ca:	f001 fca7 	bl	8002a1c <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020000 	.word	0x40020000

080010d8 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2110      	movs	r1, #16
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <wizchip_deselect+0x14>)
 80010e2:	f001 fc9b 	bl	8002a1c <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020000 	.word	0x40020000

080010f0 <wizchip_read>:

uint8_t wizchip_read()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ffba 	bl	8001070 <SPIReadWrite>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
	return rb;
 8001100:	79fb      	ldrb	r3, [r7, #7]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffaa 	bl	8001070 <SPIReadWrite>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8001130:	2300      	movs	r3, #0
 8001132:	81fb      	strh	r3, [r7, #14]
 8001134:	e00c      	b.n	8001150 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff ff9a 	bl	8001070 <SPIReadWrite>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	3301      	adds	r3, #1
 800114e:	81fb      	strh	r3, [r7, #14]
 8001150:	89fa      	ldrh	r2, [r7, #14]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3ee      	bcc.n	8001136 <wizchip_readburst+0x12>
	}
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800116e:	2300      	movs	r3, #0
 8001170:	81fb      	strh	r3, [r7, #14]
 8001172:	e00a      	b.n	800118a <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff79 	bl	8001070 <SPIReadWrite>
		pBuf++;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3301      	adds	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	3301      	adds	r3, #1
 8001188:	81fb      	strh	r3, [r7, #14]
 800118a:	89fa      	ldrh	r2, [r7, #14]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	429a      	cmp	r2, r3
 8001190:	d3f0      	bcc.n	8001174 <wizchip_writeburst+0x12>
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <W5500IOInit>:

void W5500IOInit()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <W5500IOInit+0x54>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <W5500IOInit+0x54>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <W5500IOInit+0x54>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 80011cc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80011d0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2302      	movs	r3, #2
 80011dc:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <W5500IOInit+0x58>)
 80011e4:	f001 faa6 	bl	8002734 <HAL_GPIO_Init>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <W5500Init>:

void W5500Init()
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <W5500Init+0x88>)
 8001200:	1d3c      	adds	r4, r7, #4
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8001208:	f7ff ffc8 	bl	800119c <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//CS high by default
 800120c:	2201      	movs	r2, #1
 800120e:	2110      	movs	r1, #16
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <W5500Init+0x8c>)
 8001212:	f001 fc03 	bl	8002a1c <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <W5500Init+0x8c>)
 800121e:	f001 fbfd 	bl	8002a1c <HAL_GPIO_WritePin>
	tmp = 0xFF;
 8001222:	23ff      	movs	r3, #255	; 0xff
 8001224:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8001226:	bf00      	nop
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	75fa      	strb	r2, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1fa      	bne.n	8001228 <W5500Init+0x30>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <W5500Init+0x8c>)
 800123a:	f001 fbef 	bl	8002a1c <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800123e:	4912      	ldr	r1, [pc, #72]	; (8001288 <W5500Init+0x90>)
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <W5500Init+0x94>)
 8001242:	f000 f895 	bl	8001370 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001246:	4912      	ldr	r1, [pc, #72]	; (8001290 <W5500Init+0x98>)
 8001248:	4812      	ldr	r0, [pc, #72]	; (8001294 <W5500Init+0x9c>)
 800124a:	f000 f8b7 	bl	80013bc <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 800124e:	4912      	ldr	r1, [pc, #72]	; (8001298 <W5500Init+0xa0>)
 8001250:	4812      	ldr	r0, [pc, #72]	; (800129c <W5500Init+0xa4>)
 8001252:	f000 f8df 	bl	8001414 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	2001      	movs	r0, #1
 800125c:	f000 f906 	bl	800146c <ctlwizchip>
 8001260:	4603      	mov	r3, r0
 8001262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001266:	d103      	bne.n	8001270 <W5500Init+0x78>
		printf("WIZCHIP Initialized Failed.\r\n");
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <W5500Init+0xa8>)
 800126a:	f002 f97d 	bl	8003568 <puts>
		while (1);
 800126e:	e7fe      	b.n	800126e <W5500Init+0x76>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <W5500Init+0xac>)
 8001272:	f002 f979 	bl	8003568 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	080045fc 	.word	0x080045fc
 8001284:	40020000 	.word	0x40020000
 8001288:	080010d9 	.word	0x080010d9
 800128c:	080010c1 	.word	0x080010c1
 8001290:	0800110b 	.word	0x0800110b
 8001294:	080010f1 	.word	0x080010f1
 8001298:	08001163 	.word	0x08001163
 800129c:	08001125 	.word	0x08001125
 80012a0:	080045b8 	.word	0x080045b8
 80012a4:	080045d8 	.word	0x080045d8

080012a8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	70fb      	strb	r3, [r7, #3]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
 800131c:	2300      	movs	r3, #0
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	807b      	strh	r3, [r7, #2]
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <reg_wizchip_cs_cbfunc+0x16>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <reg_wizchip_cs_cbfunc+0x40>)
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <reg_wizchip_cs_cbfunc+0x44>)
 800138a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <reg_wizchip_cs_cbfunc+0x40>)
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <reg_wizchip_cs_cbfunc+0x48>)
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	e006      	b.n	80013a2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <reg_wizchip_cs_cbfunc+0x40>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <reg_wizchip_cs_cbfunc+0x40>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	6193      	str	r3, [r2, #24]
   }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000004 	.word	0x20000004
 80013b4:	080012c5 	.word	0x080012c5
 80013b8:	080012d3 	.word	0x080012d3

080013bc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80013c6:	bf00      	nop
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <reg_wizchip_spi_cbfunc+0x4c>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f9      	beq.n	80013c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <reg_wizchip_spi_cbfunc+0x24>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <reg_wizchip_spi_cbfunc+0x4c>)
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <reg_wizchip_spi_cbfunc+0x50>)
 80013e4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <reg_wizchip_spi_cbfunc+0x4c>)
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <reg_wizchip_spi_cbfunc+0x54>)
 80013ea:	621a      	str	r2, [r3, #32]
 80013ec:	e006      	b.n	80013fc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <reg_wizchip_spi_cbfunc+0x4c>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <reg_wizchip_spi_cbfunc+0x4c>)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6213      	str	r3, [r2, #32]
   }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000004 	.word	0x20000004
 800140c:	08001319 	.word	0x08001319
 8001410:	08001329 	.word	0x08001329

08001414 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800141e:	bf00      	nop
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f9      	beq.n	8001420 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <reg_wizchip_spiburst_cbfunc+0x24>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d106      	bne.n	8001446 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <reg_wizchip_spiburst_cbfunc+0x50>)
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
 8001444:	e006      	b.n	8001454 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000004 	.word	0x20000004
 8001464:	0800133f 	.word	0x0800133f
 8001468:	08001357 	.word	0x08001357

0800146c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f200 80c7 	bhi.w	800161a <ctlwizchip+0x1ae>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <ctlwizchip+0x28>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014d5 	.word	0x080014d5
 8001498:	080014db 	.word	0x080014db
 800149c:	08001507 	.word	0x08001507
 80014a0:	080014fb 	.word	0x080014fb
 80014a4:	08001515 	.word	0x08001515
 80014a8:	08001521 	.word	0x08001521
 80014ac:	0800152f 	.word	0x0800152f
 80014b0:	08001555 	.word	0x08001555
 80014b4:	0800157b 	.word	0x0800157b
 80014b8:	080015bf 	.word	0x080015bf
 80014bc:	080015c5 	.word	0x080015c5
 80014c0:	080015cd 	.word	0x080015cd
 80014c4:	08001621 	.word	0x08001621
 80014c8:	080015d5 	.word	0x080015d5
 80014cc:	080015e3 	.word	0x080015e3
 80014d0:	080015ff 	.word	0x080015ff
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80014d4:	f000 f8ea 	bl	80016ac <wizchip_sw_reset>
         break;
 80014d8:	e0a3      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f927 	bl	8001744 <wizchip_init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	e094      	b.n	8001624 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f9ac 	bl	800185c <wizchip_clrinterrupt>
         break;
 8001504:	e08d      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001506:	f000 f9dd 	bl	80018c4 <wizchip_getinterrupt>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	801a      	strh	r2, [r3, #0]
         break;
 8001512:	e086      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f9f8 	bl	800190e <wizchip_setinterruptmask>
         break;         
 800151e:	e080      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001520:	f000 fa10 	bl	8001944 <wizchip_getinterruptmask>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	801a      	strh	r2, [r3, #0]
         break;
 800152c:	e079      	b.n	8001622 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800153e:	f7ff fbe1 	bl	8000d04 <WIZCHIP_WRITE>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800154e:	f7ff fbd9 	bl	8000d04 <WIZCHIP_WRITE>
         break;
 8001552:	e066      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001554:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001558:	f7ff fb88 	bl	8000c6c <WIZCHIP_READ>
 800155c:	4603      	mov	r3, r0
 800155e:	b29b      	uxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29c      	uxth	r4, r3
 8001564:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001568:	f7ff fb80 	bl	8000c6c <WIZCHIP_READ>
 800156c:	4603      	mov	r3, r0
 800156e:	b29b      	uxth	r3, r3
 8001570:	4423      	add	r3, r4
 8001572:	b29a      	uxth	r2, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	801a      	strh	r2, [r3, #0]
         break;
 8001578:	e053      	b.n	8001622 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <ctlwizchip+0x1c0>)
 800157c:	789a      	ldrb	r2, [r3, #2]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a29      	ldr	r2, [pc, #164]	; (800162c <ctlwizchip+0x1c0>)
 8001588:	78d2      	ldrb	r2, [r2, #3]
 800158a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3302      	adds	r3, #2
 8001590:	4a26      	ldr	r2, [pc, #152]	; (800162c <ctlwizchip+0x1c0>)
 8001592:	7912      	ldrb	r2, [r2, #4]
 8001594:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3303      	adds	r3, #3
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <ctlwizchip+0x1c0>)
 800159c:	7952      	ldrb	r2, [r2, #5]
 800159e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3304      	adds	r3, #4
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <ctlwizchip+0x1c0>)
 80015a6:	7992      	ldrb	r2, [r2, #6]
 80015a8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3305      	adds	r3, #5
 80015ae:	4a1f      	ldr	r2, [pc, #124]	; (800162c <ctlwizchip+0x1c0>)
 80015b0:	79d2      	ldrb	r2, [r2, #7]
 80015b2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3306      	adds	r3, #6
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
         break;
 80015bc:	e031      	b.n	8001622 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80015be:	f000 fa13 	bl	80019e8 <wizphy_reset>
         break;
 80015c2:	e02e      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f000 fa36 	bl	8001a36 <wizphy_setphyconf>
         break;
 80015ca:	e02a      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f000 fa74 	bl	8001aba <wizphy_getphyconf>
         break;
 80015d2:	e026      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fad7 	bl	8001b8c <wizphy_setphypmode>
 80015de:	4603      	mov	r3, r0
 80015e0:	e020      	b.n	8001624 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80015e2:	f000 f9e8 	bl	80019b6 <wizphy_getphypmode>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d102      	bne.n	80015f6 <ctlwizchip+0x18a>
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	e016      	b.n	8001624 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7dfa      	ldrb	r2, [r7, #23]
 80015fa:	701a      	strb	r2, [r3, #0]
         break;
 80015fc:	e011      	b.n	8001622 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80015fe:	f000 f9c4 	bl	800198a <wizphy_getphylink>
 8001602:	4603      	mov	r3, r0
 8001604:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2bff      	cmp	r3, #255	; 0xff
 800160a:	d102      	bne.n	8001612 <ctlwizchip+0x1a6>
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	e008      	b.n	8001624 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7dfa      	ldrb	r2, [r7, #23]
 8001616:	701a      	strb	r2, [r3, #0]
         break;
 8001618:	e003      	b.n	8001622 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e001      	b.n	8001624 <ctlwizchip+0x1b8>
         break;
 8001620:	bf00      	nop
   }
   return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	20000004 	.word	0x20000004

08001630 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d82c      	bhi.n	800169c <ctlnetwork+0x6c>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <ctlnetwork+0x18>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	08001661 	.word	0x08001661
 800164c:	08001669 	.word	0x08001669
 8001650:	08001671 	.word	0x08001671
 8001654:	0800167f 	.word	0x0800167f
 8001658:	0800168d 	.word	0x0800168d
 800165c:	08001695 	.word	0x08001695
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f000 fadd 	bl	8001c20 <wizchip_setnetinfo>
         break;
 8001666:	e01c      	b.n	80016a2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f000 fb19 	bl	8001ca0 <wizchip_getnetinfo>
         break;
 800166e:	e018      	b.n	80016a2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fb53 	bl	8001d20 <wizchip_setnetmode>
 800167a:	4603      	mov	r3, r0
 800167c:	e012      	b.n	80016a4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800167e:	f000 fb71 	bl	8001d64 <wizchip_getnetmode>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	701a      	strb	r2, [r3, #0]
         break;
 800168a:	e00a      	b.n	80016a2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800168c:	6838      	ldr	r0, [r7, #0]
 800168e:	f000 fb71 	bl	8001d74 <wizchip_settimeout>
         break;
 8001692:	e006      	b.n	80016a2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f000 fb8e 	bl	8001db6 <wizchip_gettimeout>
         break;
 800169a:	e002      	b.n	80016a2 <ctlnetwork+0x72>
      default:
         return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	e000      	b.n	80016a4 <ctlnetwork+0x74>
   }
   return 0;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2206      	movs	r2, #6
 80016b6:	4619      	mov	r1, r3
 80016b8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80016bc:	f7ff fb70 	bl	8000da0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2204      	movs	r2, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016cc:	f7ff fb68 	bl	8000da0 <WIZCHIP_READ_BUF>
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2204      	movs	r2, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80016dc:	f7ff fb60 	bl	8000da0 <WIZCHIP_READ_BUF>
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2204      	movs	r2, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80016ec:	f7ff fb58 	bl	8000da0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fb06 	bl	8000d04 <WIZCHIP_WRITE>
   getMR(); // for delay
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fab7 	bl	8000c6c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2206      	movs	r2, #6
 8001702:	4619      	mov	r1, r3
 8001704:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001708:	f7ff fbaa 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2204      	movs	r2, #4
 8001712:	4619      	mov	r1, r3
 8001714:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001718:	f7ff fba2 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2204      	movs	r2, #4
 8001722:	4619      	mov	r1, r3
 8001724:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001728:	f7ff fb9a 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2204      	movs	r2, #4
 8001732:	4619      	mov	r1, r3
 8001734:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001738:	f7ff fb92 	bl	8000e60 <WIZCHIP_WRITE_BUF>
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001752:	f7ff ffab 	bl	80016ac <wizchip_sw_reset>
   if(txsize)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03b      	beq.n	80017d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e015      	b.n	8001792 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	4413      	add	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800177c:	2b10      	cmp	r3, #16
 800177e:	dd02      	ble.n	8001786 <wizchip_init+0x42>
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e066      	b.n	8001854 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	2b07      	cmp	r3, #7
 8001798:	dde5      	ble.n	8001766 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e015      	b.n	80017cc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80017a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	3301      	adds	r3, #1
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80017ae:	4618      	mov	r0, r3
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff faa2 	bl	8000d04 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	dde5      	ble.n	80017a0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d03b      	beq.n	8001852 <wizchip_init+0x10e>
   {
      tmp = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e015      	b.n	8001810 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	4413      	add	r3, r2
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80017f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	dd02      	ble.n	8001804 <wizchip_init+0xc0>
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e027      	b.n	8001854 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3301      	adds	r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	2b07      	cmp	r3, #7
 8001816:	dde5      	ble.n	80017e4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e015      	b.n	800184a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	3301      	adds	r3, #1
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800182c:	4618      	mov	r0, r3
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff fa63 	bl	8000d04 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	2b07      	cmp	r3, #7
 8001850:	dde5      	ble.n	800181e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	b29b      	uxth	r3, r3
 8001870:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	f023 030f 	bic.w	r3, r3, #15
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001880:	f7ff fa40 	bl	8000d04 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e014      	b.n	80018b4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800188a:	7bba      	ldrb	r2, [r7, #14]
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	fa42 f303 	asr.w	r3, r2, r3
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <wizchip_clrinterrupt+0x52>
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018a6:	211f      	movs	r1, #31
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa2b 	bl	8000d04 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	3301      	adds	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d9e7      	bls.n	800188a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80018d6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80018da:	f7ff f9c7 	bl	8000c6c <WIZCHIP_READ>
 80018de:	4603      	mov	r3, r0
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80018e6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80018ea:	f7ff f9bf 	bl	8000c6c <WIZCHIP_READ>
 80018ee:	4603      	mov	r3, r0
 80018f0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001904:	88bb      	ldrh	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	b29b      	uxth	r3, r3
 8001922:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	4619      	mov	r1, r3
 8001928:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800192c:	f7ff f9ea 	bl	8000d04 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	4619      	mov	r1, r3
 8001934:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001938:	f7ff f9e4 	bl	8000d04 <WIZCHIP_WRITE>
#endif   
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001956:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800195a:	f7ff f987 	bl	8000c6c <WIZCHIP_READ>
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001962:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001966:	f7ff f981 	bl	8000c6c <WIZCHIP_READ>
 800196a:	4603      	mov	r3, r0
 800196c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b29a      	uxth	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001980:	88bb      	ldrh	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001990:	2300      	movs	r3, #0
 8001992:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001994:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001998:	f7ff f968 	bl	8000c6c <WIZCHIP_READ>
 800199c:	4603      	mov	r3, r0
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80019a6:	2301      	movs	r3, #1
 80019a8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80019c0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019c4:	f7ff f952 	bl	8000c6c <WIZCHIP_READ>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ce:	2b30      	cmp	r3, #48	; 0x30
 80019d0:	d102      	bne.n	80019d8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80019d2:	2301      	movs	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e001      	b.n	80019dc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80019ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019f2:	f7ff f93b 	bl	8000c6c <WIZCHIP_READ>
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a00:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a0a:	f7ff f97b 	bl	8000d04 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001a0e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a12:	f7ff f92b 	bl	8000c6c <WIZCHIP_READ>
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a20:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a2a:	f7ff f96b 	bl	8000d04 <WIZCHIP_WRITE>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d104      	bne.n	8001a54 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e003      	b.n	8001a5c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a5a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d104      	bne.n	8001a6e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e019      	b.n	8001aa2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	78db      	ldrb	r3, [r3, #3]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10d      	bne.n	8001a92 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	789b      	ldrb	r3, [r3, #2]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d104      	bne.n	8001a88 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	f043 0318 	orr.w	r3, r3, #24
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e00c      	b.n	8001aa2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e007      	b.n	8001aa2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	789b      	ldrb	r3, [r3, #2]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d103      	bne.n	8001aa2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001aaa:	f7ff f92b 	bl	8000d04 <WIZCHIP_WRITE>
   wizphy_reset();
 8001aae:	f7ff ff9b 	bl	80019e8 <wizphy_reset>
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001ac6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001aca:	f7ff f8cf 	bl	8000c6c <WIZCHIP_READ>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	119b      	asrs	r3, r3, #6
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d001      	beq.n	8001af0 <wizphy_getphyconf+0x36>
 8001aec:	2b38      	cmp	r3, #56	; 0x38
 8001aee:	d103      	bne.n	8001af8 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	705a      	strb	r2, [r3, #1]
         break;
 8001af6:	e003      	b.n	8001b00 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	705a      	strb	r2, [r3, #1]
         break;
 8001afe:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b06:	3b10      	subs	r3, #16
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	bf8c      	ite	hi
 8001b0c:	2201      	movhi	r2, #1
 8001b0e:	2200      	movls	r2, #0
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d111      	bne.n	8001b3a <wizphy_getphyconf+0x80>
 8001b16:	2201      	movs	r2, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8001b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	709a      	strb	r2, [r3, #2]
         break;
 8001b38:	e003      	b.n	8001b42 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	709a      	strb	r2, [r3, #2]
         break;
 8001b40:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	2b18      	cmp	r3, #24
 8001b4c:	bf8c      	ite	hi
 8001b4e:	2201      	movhi	r2, #1
 8001b50:	2200      	movls	r2, #0
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d111      	bne.n	8001b7c <wizphy_getphyconf+0xc2>
 8001b58:	2201      	movs	r2, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8001b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	70da      	strb	r2, [r3, #3]
         break;
 8001b7a:	e003      	b.n	8001b84 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	70da      	strb	r2, [r3, #3]
         break;
 8001b82:	bf00      	nop
   }
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001b9a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b9e:	f7ff f865 	bl	8000c6c <WIZCHIP_READ>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <wizphy_setphypmode+0x2a>
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e030      	b.n	8001c18 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001bbc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d104      	bne.n	8001bce <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e003      	b.n	8001bd6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001bd4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001bde:	f7ff f891 	bl	8000d04 <WIZCHIP_WRITE>
   wizphy_reset();
 8001be2:	f7ff ff01 	bl	80019e8 <wizphy_reset>
   tmp = getPHYCFGR();
 8001be6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001bea:	f7ff f83f 	bl	8000c6c <WIZCHIP_READ>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <wizphy_setphypmode+0x88>
 8001c02:	2300      	movs	r3, #0
 8001c04:	e008      	b.n	8001c18 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <wizphy_setphypmode+0x88>
 8001c10:	2300      	movs	r3, #0
 8001c12:	e001      	b.n	8001c18 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2206      	movs	r2, #6
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c32:	f7ff f915 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	330e      	adds	r3, #14
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c42:	f7ff f90d 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	330a      	adds	r3, #10
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001c52:	f7ff f905 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3306      	adds	r3, #6
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001c62:	f7ff f8fd 	bl	8000e60 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7c9a      	ldrb	r2, [r3, #18]
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <wizchip_setnetinfo+0x78>)
 8001c6c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7cda      	ldrb	r2, [r3, #19]
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <wizchip_setnetinfo+0x78>)
 8001c74:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7d1a      	ldrb	r2, [r3, #20]
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <wizchip_setnetinfo+0x78>)
 8001c7c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7d5a      	ldrb	r2, [r3, #21]
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <wizchip_setnetinfo+0x78>)
 8001c84:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7d9a      	ldrb	r2, [r3, #22]
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <wizchip_setnetinfo+0x7c>)
 8001c8c:	701a      	strb	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200000f8 	.word	0x200000f8
 8001c9c:	200000fc 	.word	0x200000fc

08001ca0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2206      	movs	r2, #6
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001cb2:	f7ff f875 	bl	8000da0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	330e      	adds	r3, #14
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cc2:	f7ff f86d 	bl	8000da0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	330a      	adds	r3, #10
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001cd2:	f7ff f865 	bl	8000da0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3306      	adds	r3, #6
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ce2:	f7ff f85d 	bl	8000da0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <wizchip_getnetinfo+0x78>)
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <wizchip_getnetinfo+0x78>)
 8001cf0:	785a      	ldrb	r2, [r3, #1]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <wizchip_getnetinfo+0x78>)
 8001cf8:	789a      	ldrb	r2, [r3, #2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <wizchip_getnetinfo+0x78>)
 8001d00:	78da      	ldrb	r2, [r3, #3]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <wizchip_getnetinfo+0x7c>)
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	759a      	strb	r2, [r3, #22]
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200000f8 	.word	0x200000f8
 8001d1c:	200000fc 	.word	0x200000fc

08001d20 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <wizchip_setnetmode+0x1e>
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3c:	e00e      	b.n	8001d5c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7fe ff94 	bl	8000c6c <WIZCHIP_READ>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	4619      	mov	r1, r3
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7fe ffd5 	bl	8000d04 <WIZCHIP_WRITE>
   return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7fe ff7f 	bl	8000c6c <WIZCHIP_READ>
 8001d6e:	4603      	mov	r3, r0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001d86:	f7fe ffbd 	bl	8000d04 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001d9a:	f7fe ffb3 	bl	8000d04 <WIZCHIP_WRITE>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001daa:	f7fe ffab 	bl	8000d04 <WIZCHIP_WRITE>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001db6:	b590      	push	{r4, r7, lr}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001dbe:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001dc2:	f7fe ff53 	bl	8000c6c <WIZCHIP_READ>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001dce:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001dd2:	f7fe ff4b 	bl	8000c6c <WIZCHIP_READ>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b29c      	uxth	r4, r3
 8001dde:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001de2:	f7fe ff43 	bl	8000c6c <WIZCHIP_READ>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4423      	add	r3, r4
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	805a      	strh	r2, [r3, #2]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
	...

08001dfc <PHYStatusCheck>:
	uint8_t destination_ip[]={192,168,1,137};
	uint16_t destination_port=5000;


void PHYStatusCheck(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <PHYStatusCheck+0x40>)
 8001e04:	f001 fb2a 	bl	800345c <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	200f      	movs	r0, #15
 8001e0e:	f7ff fb2d 	bl	800146c <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <PHYStatusCheck+0x44>)
 8001e1a:	f001 fb1f 	bl	800345c <iprintf>
			HAL_Delay(1500);
 8001e1e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e22:	f000 fb7d 	bl	8002520 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ea      	beq.n	8001e02 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <PHYStatusCheck+0x48>)
 8001e2e:	f001 fb15 	bl	800345c <iprintf>

}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	0800460c 	.word	0x0800460c
 8001e40:	08004634 	.word	0x08004634
 8001e44:	08004648 	.word	0x08004648

08001e48 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	200b      	movs	r0, #11
 8001e54:	f7ff fb0a 	bl	800146c <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8001e58:	793b      	ldrb	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8001e5e:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <PrintPHYConf+0x68>)
 8001e60:	f001 fafc 	bl	800345c <iprintf>
 8001e64:	e002      	b.n	8001e6c <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 8001e66:	4813      	ldr	r0, [pc, #76]	; (8001eb4 <PrintPHYConf+0x6c>)
 8001e68:	f001 faf8 	bl	800345c <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d103      	bne.n	8001e7a <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8001e72:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <PrintPHYConf+0x70>)
 8001e74:	f001 faf2 	bl	800345c <iprintf>
 8001e78:	e002      	b.n	8001e80 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 8001e7a:	4810      	ldr	r0, [pc, #64]	; (8001ebc <PrintPHYConf+0x74>)
 8001e7c:	f001 faee 	bl	800345c <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d103      	bne.n	8001e8e <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8001e86:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <PrintPHYConf+0x78>)
 8001e88:	f001 fae8 	bl	800345c <iprintf>
 8001e8c:	e002      	b.n	8001e94 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <PrintPHYConf+0x7c>)
 8001e90:	f001 fae4 	bl	800345c <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8001e9a:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <PrintPHYConf+0x80>)
 8001e9c:	f001 fade 	bl	800345c <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8001ea0:	e002      	b.n	8001ea8 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8001ea2:	480a      	ldr	r0, [pc, #40]	; (8001ecc <PrintPHYConf+0x84>)
 8001ea4:	f001 fada 	bl	800345c <iprintf>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	08004664 	.word	0x08004664
 8001eb4:	08004688 	.word	0x08004688
 8001eb8:	080046a8 	.word	0x080046a8
 8001ebc:	080046c4 	.word	0x080046c4
 8001ec0:	080046e4 	.word	0x080046e4
 8001ec4:	080046f8 	.word	0x080046f8
 8001ec8:	0800470c 	.word	0x0800470c
 8001ecc:	0800471c 	.word	0x0800471c

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed6:	f000 fab1 	bl	800243c <HAL_Init>

  /* USER CODE BEGIN Init */

  setbuf(stdout, NULL);
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <main+0xf0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fb48 	bl	8003578 <setbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee8:	f000 f880 	bl	8001fec <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_SPI1_Init();
 8001eec:	f000 f8e8 	bl	80020c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  W5500Init();
 8001ef0:	f7ff f982 	bl	80011f8 <W5500Init>

  HAL_Delay(1000);
 8001ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef8:	f000 fb12 	bl	8002520 <HAL_Delay>

  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8001efc:	4931      	ldr	r1, [pc, #196]	; (8001fc4 <main+0xf4>)
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fb96 	bl	8001630 <ctlnetwork>

  HAL_Delay(1000);
 8001f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f08:	f000 fb0a 	bl	8002520 <HAL_Delay>

  wiz_PhyConf phyConf;

  phyConf.by = PHY_CONFBY_SW;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	703b      	strb	r3, [r7, #0]
  phyConf.duplex = PHY_DUPLEX_FULL;
 8001f10:	2301      	movs	r3, #1
 8001f12:	70fb      	strb	r3, [r7, #3]
  phyConf.speed = PHY_SPEED_10;
 8001f14:	2300      	movs	r3, #0
 8001f16:	70bb      	strb	r3, [r7, #2]
  phyConf.mode = PHY_MODE_AUTONEGO;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	707b      	strb	r3, [r7, #1]

  ctlwizchip(CW_SET_PHYCONF, (void*)&phyConf);
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	200a      	movs	r0, #10
 8001f22:	f7ff faa3 	bl	800146c <ctlwizchip>

  HAL_Delay(1000);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f000 faf9 	bl	8002520 <HAL_Delay>

  PHYStatusCheck();
 8001f2e:	f7ff ff65 	bl	8001dfc <PHYStatusCheck>

  HAL_Delay(1000);
 8001f32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f36:	f000 faf3 	bl	8002520 <HAL_Delay>

  PrintPHYConf();
 8001f3a:	f7ff ff85 	bl	8001e48 <PrintPHYConf>
  HAL_Delay(1000);
 8001f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f42:	f000 faed 	bl	8002520 <HAL_Delay>


  if( socket(1, Sn_MR_TCP, 0, 0) )
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7fe fb33 	bl	80005b8 <socket>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <main+0x90>
  {
	  printf("\r\nSocket created successfully..");
 8001f58:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <main+0xf8>)
 8001f5a:	f001 fa7f 	bl	800345c <iprintf>
 8001f5e:	e002      	b.n	8001f66 <main+0x96>
  }
  else
  {
	  printf("\r\nSocket cannot created..");
 8001f60:	481a      	ldr	r0, [pc, #104]	; (8001fcc <main+0xfc>)
 8001f62:	f001 fa7b 	bl	800345c <iprintf>
	  //while(1);
  }

  if(connect( 1, destination_ip, destination_port ) == SOCK_OK )
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <main+0x100>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4919      	ldr	r1, [pc, #100]	; (8001fd4 <main+0x104>)
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7fe fca6 	bl	80008c0 <connect>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d103      	bne.n	8001f82 <main+0xb2>
  {
	  printf("Connected with server");
 8001f7a:	4817      	ldr	r0, [pc, #92]	; (8001fd8 <main+0x108>)
 8001f7c:	f001 fa6e 	bl	800345c <iprintf>
 8001f80:	e002      	b.n	8001f88 <main+0xb8>
  }
  else
  {
	  printf("Cannot connect");
 8001f82:	4816      	ldr	r0, [pc, #88]	; (8001fdc <main+0x10c>)
 8001f84:	f001 fa6a 	bl	800345c <iprintf>
//  uint8_t RSR_len;
//  uint8_t data_buf[30];
//  uint8_t Kop;


char *txt = "Hello everyone, what's up...................................enes is onlineee anymore...\n\r";
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <main+0x110>)
 8001f8a:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if( send(1, (uint8_t*)txt, strlen(txt))<SOCK_ERROR )
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7fe f93f 	bl	8000210 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7fe fd6c 	bl	8000a78 <send>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da03      	bge.n	8001fae <main+0xde>
	  {
		  printf("Sending fail");
 8001fa6:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <main+0x114>)
 8001fa8:	f001 fa58 	bl	800345c <iprintf>
 8001fac:	e002      	b.n	8001fb4 <main+0xe4>
		  //while(1);
	  }
	  else
	  {
		  printf("SEnding success");
 8001fae:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <main+0x118>)
 8001fb0:	f001 fa54 	bl	800345c <iprintf>
	  }

	  HAL_Delay(1000);
 8001fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fb8:	f000 fab2 	bl	8002520 <HAL_Delay>
	  if( send(1, (uint8_t*)txt, strlen(txt))<SOCK_ERROR )
 8001fbc:	e7e6      	b.n	8001f8c <main+0xbc>
 8001fbe:	bf00      	nop
 8001fc0:	2000005c 	.word	0x2000005c
 8001fc4:	20000030 	.word	0x20000030
 8001fc8:	08004730 	.word	0x08004730
 8001fcc:	08004750 	.word	0x08004750
 8001fd0:	2000004c 	.word	0x2000004c
 8001fd4:	20000048 	.word	0x20000048
 8001fd8:	0800476c 	.word	0x0800476c
 8001fdc:	08004784 	.word	0x08004784
 8001fe0:	08004794 	.word	0x08004794
 8001fe4:	080047f0 	.word	0x080047f0
 8001fe8:	08004800 	.word	0x08004800

08001fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b094      	sub	sp, #80	; 0x50
 8001ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	2234      	movs	r2, #52	; 0x34
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fa26 	bl	800344c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <SystemClock_Config+0xcc>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <SystemClock_Config+0xcc>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <SystemClock_Config+0xcc>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <SystemClock_Config+0xd0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <SystemClock_Config+0xd0>)
 8002036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <SystemClock_Config+0xd0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002048:	2301      	movs	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800204c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002050:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002052:	2302      	movs	r3, #2
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800205c:	2308      	movs	r3, #8
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002060:	2364      	movs	r3, #100	; 0x64
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002064:	2302      	movs	r3, #2
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002068:	2302      	movs	r3, #2
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800206c:	2302      	movs	r3, #2
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4618      	mov	r0, r3
 8002076:	f000 feb1 	bl	8002ddc <HAL_RCC_OscConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002080:	f000 f85c 	bl	800213c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002084:	230f      	movs	r3, #15
 8002086:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002088:	2302      	movs	r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	2103      	movs	r1, #3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fcd5 	bl	8002a50 <HAL_RCC_ClockConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020ac:	f000 f846 	bl	800213c <Error_Handler>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3750      	adds	r7, #80	; 0x50
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000

080020c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_SPI1_Init+0x74>)
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <MX_SPI1_Init+0x78>)
 80020c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_SPI1_Init+0x74>)
 80020cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_SPI1_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_SPI1_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_SPI1_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <MX_SPI1_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI1_Init+0x74>)
 80020ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <MX_SPI1_Init+0x74>)
 80020f4:	2210      	movs	r2, #16
 80020f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_SPI1_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <MX_SPI1_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_SPI1_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI1_Init+0x74>)
 800210c:	220a      	movs	r2, #10
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <MX_SPI1_Init+0x74>)
 8002112:	f001 f8e7 	bl	80032e4 <HAL_SPI_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800211c:	f000 f80e 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <MX_SPI1_Init+0x74>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b03      	ldr	r3, [pc, #12]	; (8002134 <MX_SPI1_Init+0x74>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800212e:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000010c 	.word	0x2000010c
 8002138:	40013000 	.word	0x40013000

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_MspInit+0x4c>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_SPI_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12b      	bne.n	8002212 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021f2:	23e0      	movs	r3, #224	; 0xe0
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002202:	2305      	movs	r3, #5
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 800220e:	f000 fa91 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40013000 	.word	0x40013000
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f934 	bl	80024e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e00a      	b.n	80022a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228e:	f3af 8000 	nop.w
 8002292:	4601      	mov	r1, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	60ba      	str	r2, [r7, #8]
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf0      	blt.n	800228e <_read+0x12>
	}

return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e009      	b.n	80022dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dbf1      	blt.n	80022c8 <_write+0x12>
	}
	return len;
 80022e4:	687b      	ldr	r3, [r7, #4]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_close>:

int _close(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002316:	605a      	str	r2, [r3, #4]
	return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_isatty>:

int _isatty(int file)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
	return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <_sbrk+0x5c>)
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <_sbrk+0x60>)
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <_sbrk+0x64>)
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <_sbrk+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	429a      	cmp	r2, r3
 8002386:	d207      	bcs.n	8002398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002388:	f001 f836 	bl	80033f8 <__errno>
 800238c:	4603      	mov	r3, r0
 800238e:	220c      	movs	r2, #12
 8002390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e009      	b.n	80023ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <_sbrk+0x64>)
 80023a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20040000 	.word	0x20040000
 80023b8:	00000400 	.word	0x00000400
 80023bc:	20000100 	.word	0x20000100
 80023c0:	20000178 	.word	0x20000178

080023c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <SystemInit+0x20>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <SystemInit+0x20>)
 80023d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80023e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ee:	490e      	ldr	r1, [pc, #56]	; (8002428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f0:	4a0e      	ldr	r2, [pc, #56]	; (800242c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f4:	e002      	b.n	80023fc <LoopCopyDataInit>

080023f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fa:	3304      	adds	r3, #4

080023fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002400:	d3f9      	bcc.n	80023f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002404:	4c0b      	ldr	r4, [pc, #44]	; (8002434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002408:	e001      	b.n	800240e <LoopFillZerobss>

0800240a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800240c:	3204      	adds	r2, #4

0800240e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002410:	d3fb      	bcc.n	800240a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002412:	f7ff ffd7 	bl	80023c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002416:	f000 fff5 	bl	8003404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241a:	f7ff fd59 	bl	8001ed0 <main>
  bx  lr    
 800241e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002420:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800242c:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8002430:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002434:	20000178 	.word	0x20000178

08002438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC_IRQHandler>
	...

0800243c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <HAL_Init+0x40>)
 8002446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_Init+0x40>)
 8002452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_Init+0x40>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002464:	2003      	movs	r0, #3
 8002466:	f000 f931 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246a:	200f      	movs	r0, #15
 800246c:	f000 f808 	bl	8002480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002470:	f7ff fe6a 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023c00 	.word	0x40023c00

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x54>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x58>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002496:	fbb3 f3f1 	udiv	r3, r3, r1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f93b 	bl	800271a <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00e      	b.n	80024cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d80a      	bhi.n	80024ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f000 f911 	bl	80026e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <HAL_InitTick+0x5c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000050 	.word	0x20000050
 80024d8:	20000058 	.word	0x20000058
 80024dc:	20000054 	.word	0x20000054

080024e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x20>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x24>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_IncTick+0x24>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000058 	.word	0x20000058
 8002504:	20000164 	.word	0x20000164

08002508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_GetTick+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000164 	.word	0x20000164

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff ffee 	bl	8002508 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_Delay+0x44>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffde 	bl	8002508 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000058 	.word	0x20000058

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff8e 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff47 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff5c 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ff8e 	bl	8002620 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff5d 	bl	80025cc <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffb0 	bl	8002688 <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e14d      	b.n	80029ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 813c 	bne.w	80029e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d005      	beq.n	8002786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	2b02      	cmp	r3, #2
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d017      	beq.n	8002824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8096 	beq.w	80029e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_GPIO_Init+0x2d0>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a50      	ldr	r2, [pc, #320]	; (8002a04 <HAL_GPIO_Init+0x2d0>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x2d0>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <HAL_GPIO_Init+0x2d4>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a43      	ldr	r2, [pc, #268]	; (8002a0c <HAL_GPIO_Init+0x2d8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x1ea>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_GPIO_Init+0x2dc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x1e6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a41      	ldr	r2, [pc, #260]	; (8002a14 <HAL_GPIO_Init+0x2e0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x1e2>
 8002912:	2302      	movs	r3, #2
 8002914:	e004      	b.n	8002920 <HAL_GPIO_Init+0x1ec>
 8002916:	2307      	movs	r3, #7
 8002918:	e002      	b.n	8002920 <HAL_GPIO_Init+0x1ec>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x1ec>
 800291e:	2300      	movs	r3, #0
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	f002 0203 	and.w	r2, r2, #3
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	4093      	lsls	r3, r2
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002930:	4935      	ldr	r1, [pc, #212]	; (8002a08 <HAL_GPIO_Init+0x2d4>)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002962:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_GPIO_Init+0x2e4>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f aeae 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cc      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90c      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d044      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d119      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e067      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4934      	ldr	r1, [pc, #208]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff fce2 	bl	8002508 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff fcde 	bl	8002508 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20c      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fc42 	bl	8002480 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08004810 	.word	0x08004810
 8002c14:	20000050 	.word	0x20000050
 8002c18:	20000054 	.word	0x20000054

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 80bd 	bhi.w	8002dc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4e:	e0b7      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c52:	60bb      	str	r3, [r7, #8]
       break;
 8002c54:	e0b7      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b60      	ldr	r3, [pc, #384]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c58:	60bb      	str	r3, [r7, #8]
      break;
 8002c5a:	e0b4      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b5d      	ldr	r3, [pc, #372]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04d      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b58      	ldr	r3, [pc, #352]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	ea02 0800 	and.w	r8, r2, r0
 8002c8a:	ea03 0901 	and.w	r9, r3, r1
 8002c8e:	4640      	mov	r0, r8
 8002c90:	4649      	mov	r1, r9
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	014b      	lsls	r3, r1, #5
 8002c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ca0:	0142      	lsls	r2, r0, #5
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	ebb0 0008 	subs.w	r0, r0, r8
 8002caa:	eb61 0109 	sbc.w	r1, r1, r9
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	018b      	lsls	r3, r1, #6
 8002cb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cbc:	0182      	lsls	r2, r0, #6
 8002cbe:	1a12      	subs	r2, r2, r0
 8002cc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc4:	f04f 0000 	mov.w	r0, #0
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	00d9      	lsls	r1, r3, #3
 8002cce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd2:	00d0      	lsls	r0, r2, #3
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	eb12 0208 	adds.w	r2, r2, r8
 8002cdc:	eb43 0309 	adc.w	r3, r3, r9
 8002ce0:	f04f 0000 	mov.w	r0, #0
 8002ce4:	f04f 0100 	mov.w	r1, #0
 8002ce8:	0299      	lsls	r1, r3, #10
 8002cea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cee:	0290      	lsls	r0, r2, #10
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f7fd fade 	bl	80002c0 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e04a      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	461a      	mov	r2, r3
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	ea02 0400 	and.w	r4, r2, r0
 8002d26:	ea03 0501 	and.w	r5, r3, r1
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	014b      	lsls	r3, r1, #5
 8002d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d3c:	0142      	lsls	r2, r0, #5
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	1b00      	subs	r0, r0, r4
 8002d44:	eb61 0105 	sbc.w	r1, r1, r5
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	018b      	lsls	r3, r1, #6
 8002d52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d56:	0182      	lsls	r2, r0, #6
 8002d58:	1a12      	subs	r2, r2, r0
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	00d9      	lsls	r1, r3, #3
 8002d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d6c:	00d0      	lsls	r0, r2, #3
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	1912      	adds	r2, r2, r4
 8002d74:	eb45 0303 	adc.w	r3, r5, r3
 8002d78:	f04f 0000 	mov.w	r0, #0
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	0299      	lsls	r1, r3, #10
 8002d82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d86:	0290      	lsls	r0, r2, #10
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f7fd fa92 	bl	80002c0 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4613      	mov	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	3301      	adds	r3, #1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	60bb      	str	r3, [r7, #8]
      break;
 8002dbe:	e002      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dc2:	60bb      	str	r3, [r7, #8]
      break;
 8002dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	00f42400 	.word	0x00f42400

08002ddc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e270      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d075      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dfa:	4ba3      	ldr	r3, [pc, #652]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d00c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e06:	4ba0      	ldr	r3, [pc, #640]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d112      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e12:	4b9d      	ldr	r3, [pc, #628]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b99      	ldr	r3, [pc, #612]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05b      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x108>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d157      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e24b      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x74>
 8002e42:	4b91      	ldr	r3, [pc, #580]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a90      	ldr	r2, [pc, #576]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0xb0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x98>
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a8a      	ldr	r2, [pc, #552]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a87      	ldr	r2, [pc, #540]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xb0>
 8002e74:	4b84      	ldr	r3, [pc, #528]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a83      	ldr	r2, [pc, #524]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a80      	ldr	r2, [pc, #512]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7ff fb38 	bl	8002508 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7ff fb34 	bl	8002508 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e210      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b76      	ldr	r3, [pc, #472]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0xc0>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7ff fb24 	bl	8002508 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7ff fb20 	bl	8002508 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1fc      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xe8>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d063      	beq.n	8002fba <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b62      	ldr	r3, [pc, #392]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d116      	bne.n	8002f44 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_RCC_OscConfig+0x152>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1d0      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4952      	ldr	r1, [pc, #328]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	e03a      	b.n	8002fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b4f      	ldr	r3, [pc, #316]	; (800308c <HAL_RCC_OscConfig+0x2b0>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7ff fad9 	bl	8002508 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7ff fad5 	bl	8002508 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e1b1      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	4b46      	ldr	r3, [pc, #280]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4940      	ldr	r1, [pc, #256]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_RCC_OscConfig+0x2b0>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7ff fab8 	bl	8002508 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7ff fab4 	bl	8002508 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e190      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d030      	beq.n	8003028 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_RCC_OscConfig+0x2b4>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7ff fa98 	bl	8002508 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7ff fa94 	bl	8002508 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e170      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x200>
 8002ffa:	e015      	b.n	8003028 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x2b4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7ff fa81 	bl	8002508 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300a:	f7ff fa7d 	bl	8002508 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e159      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a0 	beq.w	8003176 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x2b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d121      	bne.n	80030b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCC_OscConfig+0x2b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_RCC_OscConfig+0x2b8>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7ff fa43 	bl	8002508 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e011      	b.n	80030aa <HAL_RCC_OscConfig+0x2ce>
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	42470000 	.word	0x42470000
 8003090:	42470e80 	.word	0x42470e80
 8003094:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003098:	f7ff fa36 	bl	8002508 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e112      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b8b      	ldr	r3, [pc, #556]	; (80032d8 <HAL_RCC_OscConfig+0x4fc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x2f0>
 80030be:	4b87      	ldr	r3, [pc, #540]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	4a86      	ldr	r2, [pc, #536]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ca:	e01c      	b.n	8003106 <HAL_RCC_OscConfig+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d10c      	bne.n	80030ee <HAL_RCC_OscConfig+0x312>
 80030d4:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a80      	ldr	r2, [pc, #512]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a7d      	ldr	r2, [pc, #500]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	e00b      	b.n	8003106 <HAL_RCC_OscConfig+0x32a>
 80030ee:	4b7b      	ldr	r3, [pc, #492]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a7a      	ldr	r2, [pc, #488]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	4b78      	ldr	r3, [pc, #480]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a77      	ldr	r2, [pc, #476]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d015      	beq.n	800313a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7ff f9fb 	bl	8002508 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7ff f9f7 	bl	8002508 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0d1      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312c:	4b6b      	ldr	r3, [pc, #428]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ee      	beq.n	8003116 <HAL_RCC_OscConfig+0x33a>
 8003138:	e014      	b.n	8003164 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7ff f9e5 	bl	8002508 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7ff f9e1 	bl	8002508 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0bb      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003158:	4b60      	ldr	r3, [pc, #384]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ee      	bne.n	8003142 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a7 	beq.w	80032ce <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003180:	4b56      	ldr	r3, [pc, #344]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d060      	beq.n	800324e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d145      	bne.n	8003220 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_RCC_OscConfig+0x504>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7ff f9b5 	bl	8002508 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7ff f9b1 	bl	8002508 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e08d      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	019b      	lsls	r3, r3, #6
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	3b01      	subs	r3, #1
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	061b      	lsls	r3, r3, #24
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	071b      	lsls	r3, r3, #28
 80031ec:	493b      	ldr	r1, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x504>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7ff f986 	bl	8002508 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7ff f982 	bl	8002508 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e05e      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x424>
 800321e:	e056      	b.n	80032ce <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_RCC_OscConfig+0x504>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7ff f96f 	bl	8002508 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322e:	f7ff f96b 	bl	8002508 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e047      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x452>
 800324c:	e03f      	b.n	80032ce <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e03a      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_OscConfig+0x500>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d030      	beq.n	80032ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d129      	bne.n	80032ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d122      	bne.n	80032ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003290:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003292:	4293      	cmp	r3, r2
 8003294:	d119      	bne.n	80032ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d10f      	bne.n	80032ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40007000 	.word	0x40007000
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470060 	.word	0x42470060

080032e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07b      	b.n	80033ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003306:	d009      	beq.n	800331c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	e005      	b.n	800331c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe ff2e 	bl	8002198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	ea42 0103 	orr.w	r1, r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0104 	and.w	r1, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0210 	and.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <__errno>:
 80033f8:	4b01      	ldr	r3, [pc, #4]	; (8003400 <__errno+0x8>)
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000005c 	.word	0x2000005c

08003404 <__libc_init_array>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	4d0d      	ldr	r5, [pc, #52]	; (800343c <__libc_init_array+0x38>)
 8003408:	4c0d      	ldr	r4, [pc, #52]	; (8003440 <__libc_init_array+0x3c>)
 800340a:	1b64      	subs	r4, r4, r5
 800340c:	10a4      	asrs	r4, r4, #2
 800340e:	2600      	movs	r6, #0
 8003410:	42a6      	cmp	r6, r4
 8003412:	d109      	bne.n	8003428 <__libc_init_array+0x24>
 8003414:	4d0b      	ldr	r5, [pc, #44]	; (8003444 <__libc_init_array+0x40>)
 8003416:	4c0c      	ldr	r4, [pc, #48]	; (8003448 <__libc_init_array+0x44>)
 8003418:	f001 f8c2 	bl	80045a0 <_init>
 800341c:	1b64      	subs	r4, r4, r5
 800341e:	10a4      	asrs	r4, r4, #2
 8003420:	2600      	movs	r6, #0
 8003422:	42a6      	cmp	r6, r4
 8003424:	d105      	bne.n	8003432 <__libc_init_array+0x2e>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	f855 3b04 	ldr.w	r3, [r5], #4
 800342c:	4798      	blx	r3
 800342e:	3601      	adds	r6, #1
 8003430:	e7ee      	b.n	8003410 <__libc_init_array+0xc>
 8003432:	f855 3b04 	ldr.w	r3, [r5], #4
 8003436:	4798      	blx	r3
 8003438:	3601      	adds	r6, #1
 800343a:	e7f2      	b.n	8003422 <__libc_init_array+0x1e>
 800343c:	080048c0 	.word	0x080048c0
 8003440:	080048c0 	.word	0x080048c0
 8003444:	080048c0 	.word	0x080048c0
 8003448:	080048c4 	.word	0x080048c4

0800344c <memset>:
 800344c:	4402      	add	r2, r0
 800344e:	4603      	mov	r3, r0
 8003450:	4293      	cmp	r3, r2
 8003452:	d100      	bne.n	8003456 <memset+0xa>
 8003454:	4770      	bx	lr
 8003456:	f803 1b01 	strb.w	r1, [r3], #1
 800345a:	e7f9      	b.n	8003450 <memset+0x4>

0800345c <iprintf>:
 800345c:	b40f      	push	{r0, r1, r2, r3}
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <iprintf+0x2c>)
 8003460:	b513      	push	{r0, r1, r4, lr}
 8003462:	681c      	ldr	r4, [r3, #0]
 8003464:	b124      	cbz	r4, 8003470 <iprintf+0x14>
 8003466:	69a3      	ldr	r3, [r4, #24]
 8003468:	b913      	cbnz	r3, 8003470 <iprintf+0x14>
 800346a:	4620      	mov	r0, r4
 800346c:	f000 fb2c 	bl	8003ac8 <__sinit>
 8003470:	ab05      	add	r3, sp, #20
 8003472:	9a04      	ldr	r2, [sp, #16]
 8003474:	68a1      	ldr	r1, [r4, #8]
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	4620      	mov	r0, r4
 800347a:	f000 fd05 	bl	8003e88 <_vfiprintf_r>
 800347e:	b002      	add	sp, #8
 8003480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003484:	b004      	add	sp, #16
 8003486:	4770      	bx	lr
 8003488:	2000005c 	.word	0x2000005c

0800348c <_puts_r>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	460e      	mov	r6, r1
 8003490:	4605      	mov	r5, r0
 8003492:	b118      	cbz	r0, 800349c <_puts_r+0x10>
 8003494:	6983      	ldr	r3, [r0, #24]
 8003496:	b90b      	cbnz	r3, 800349c <_puts_r+0x10>
 8003498:	f000 fb16 	bl	8003ac8 <__sinit>
 800349c:	69ab      	ldr	r3, [r5, #24]
 800349e:	68ac      	ldr	r4, [r5, #8]
 80034a0:	b913      	cbnz	r3, 80034a8 <_puts_r+0x1c>
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 fb10 	bl	8003ac8 <__sinit>
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <_puts_r+0xd0>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d120      	bne.n	80034f0 <_puts_r+0x64>
 80034ae:	686c      	ldr	r4, [r5, #4]
 80034b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b2:	07db      	lsls	r3, r3, #31
 80034b4:	d405      	bmi.n	80034c2 <_puts_r+0x36>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	0598      	lsls	r0, r3, #22
 80034ba:	d402      	bmi.n	80034c2 <_puts_r+0x36>
 80034bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034be:	f000 fba1 	bl	8003c04 <__retarget_lock_acquire_recursive>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	0719      	lsls	r1, r3, #28
 80034c6:	d51d      	bpl.n	8003504 <_puts_r+0x78>
 80034c8:	6923      	ldr	r3, [r4, #16]
 80034ca:	b1db      	cbz	r3, 8003504 <_puts_r+0x78>
 80034cc:	3e01      	subs	r6, #1
 80034ce:	68a3      	ldr	r3, [r4, #8]
 80034d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	bb39      	cbnz	r1, 800352a <_puts_r+0x9e>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da38      	bge.n	8003550 <_puts_r+0xc4>
 80034de:	4622      	mov	r2, r4
 80034e0:	210a      	movs	r1, #10
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f916 	bl	8003714 <__swbuf_r>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d011      	beq.n	8003510 <_puts_r+0x84>
 80034ec:	250a      	movs	r5, #10
 80034ee:	e011      	b.n	8003514 <_puts_r+0x88>
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <_puts_r+0xd4>)
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d101      	bne.n	80034fa <_puts_r+0x6e>
 80034f6:	68ac      	ldr	r4, [r5, #8]
 80034f8:	e7da      	b.n	80034b0 <_puts_r+0x24>
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <_puts_r+0xd8>)
 80034fc:	429c      	cmp	r4, r3
 80034fe:	bf08      	it	eq
 8003500:	68ec      	ldreq	r4, [r5, #12]
 8003502:	e7d5      	b.n	80034b0 <_puts_r+0x24>
 8003504:	4621      	mov	r1, r4
 8003506:	4628      	mov	r0, r5
 8003508:	f000 f956 	bl	80037b8 <__swsetup_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	d0dd      	beq.n	80034cc <_puts_r+0x40>
 8003510:	f04f 35ff 	mov.w	r5, #4294967295
 8003514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003516:	07da      	lsls	r2, r3, #31
 8003518:	d405      	bmi.n	8003526 <_puts_r+0x9a>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	059b      	lsls	r3, r3, #22
 800351e:	d402      	bmi.n	8003526 <_puts_r+0x9a>
 8003520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003522:	f000 fb70 	bl	8003c06 <__retarget_lock_release_recursive>
 8003526:	4628      	mov	r0, r5
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	2b00      	cmp	r3, #0
 800352c:	da04      	bge.n	8003538 <_puts_r+0xac>
 800352e:	69a2      	ldr	r2, [r4, #24]
 8003530:	429a      	cmp	r2, r3
 8003532:	dc06      	bgt.n	8003542 <_puts_r+0xb6>
 8003534:	290a      	cmp	r1, #10
 8003536:	d004      	beq.n	8003542 <_puts_r+0xb6>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	6022      	str	r2, [r4, #0]
 800353e:	7019      	strb	r1, [r3, #0]
 8003540:	e7c5      	b.n	80034ce <_puts_r+0x42>
 8003542:	4622      	mov	r2, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 f8e5 	bl	8003714 <__swbuf_r>
 800354a:	3001      	adds	r0, #1
 800354c:	d1bf      	bne.n	80034ce <_puts_r+0x42>
 800354e:	e7df      	b.n	8003510 <_puts_r+0x84>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	250a      	movs	r5, #10
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	6022      	str	r2, [r4, #0]
 8003558:	701d      	strb	r5, [r3, #0]
 800355a:	e7db      	b.n	8003514 <_puts_r+0x88>
 800355c:	08004844 	.word	0x08004844
 8003560:	08004864 	.word	0x08004864
 8003564:	08004824 	.word	0x08004824

08003568 <puts>:
 8003568:	4b02      	ldr	r3, [pc, #8]	; (8003574 <puts+0xc>)
 800356a:	4601      	mov	r1, r0
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	f7ff bf8d 	b.w	800348c <_puts_r>
 8003572:	bf00      	nop
 8003574:	2000005c 	.word	0x2000005c

08003578 <setbuf>:
 8003578:	2900      	cmp	r1, #0
 800357a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357e:	bf0c      	ite	eq
 8003580:	2202      	moveq	r2, #2
 8003582:	2200      	movne	r2, #0
 8003584:	f000 b800 	b.w	8003588 <setvbuf>

08003588 <setvbuf>:
 8003588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800358c:	461d      	mov	r5, r3
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <setvbuf+0x17c>)
 8003590:	681f      	ldr	r7, [r3, #0]
 8003592:	4604      	mov	r4, r0
 8003594:	460e      	mov	r6, r1
 8003596:	4690      	mov	r8, r2
 8003598:	b127      	cbz	r7, 80035a4 <setvbuf+0x1c>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	b913      	cbnz	r3, 80035a4 <setvbuf+0x1c>
 800359e:	4638      	mov	r0, r7
 80035a0:	f000 fa92 	bl	8003ac8 <__sinit>
 80035a4:	4b58      	ldr	r3, [pc, #352]	; (8003708 <setvbuf+0x180>)
 80035a6:	429c      	cmp	r4, r3
 80035a8:	d167      	bne.n	800367a <setvbuf+0xf2>
 80035aa:	687c      	ldr	r4, [r7, #4]
 80035ac:	f1b8 0f02 	cmp.w	r8, #2
 80035b0:	d006      	beq.n	80035c0 <setvbuf+0x38>
 80035b2:	f1b8 0f01 	cmp.w	r8, #1
 80035b6:	f200 809f 	bhi.w	80036f8 <setvbuf+0x170>
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	f2c0 809c 	blt.w	80036f8 <setvbuf+0x170>
 80035c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035c2:	07db      	lsls	r3, r3, #31
 80035c4:	d405      	bmi.n	80035d2 <setvbuf+0x4a>
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	0598      	lsls	r0, r3, #22
 80035ca:	d402      	bmi.n	80035d2 <setvbuf+0x4a>
 80035cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ce:	f000 fb19 	bl	8003c04 <__retarget_lock_acquire_recursive>
 80035d2:	4621      	mov	r1, r4
 80035d4:	4638      	mov	r0, r7
 80035d6:	f000 f9e3 	bl	80039a0 <_fflush_r>
 80035da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035dc:	b141      	cbz	r1, 80035f0 <setvbuf+0x68>
 80035de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e2:	4299      	cmp	r1, r3
 80035e4:	d002      	beq.n	80035ec <setvbuf+0x64>
 80035e6:	4638      	mov	r0, r7
 80035e8:	f000 fb7a 	bl	8003ce0 <_free_r>
 80035ec:	2300      	movs	r3, #0
 80035ee:	6363      	str	r3, [r4, #52]	; 0x34
 80035f0:	2300      	movs	r3, #0
 80035f2:	61a3      	str	r3, [r4, #24]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	0619      	lsls	r1, r3, #24
 80035fa:	d503      	bpl.n	8003604 <setvbuf+0x7c>
 80035fc:	6921      	ldr	r1, [r4, #16]
 80035fe:	4638      	mov	r0, r7
 8003600:	f000 fb6e 	bl	8003ce0 <_free_r>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	f1b8 0f02 	cmp.w	r8, #2
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	d06c      	beq.n	80036f0 <setvbuf+0x168>
 8003616:	ab01      	add	r3, sp, #4
 8003618:	466a      	mov	r2, sp
 800361a:	4621      	mov	r1, r4
 800361c:	4638      	mov	r0, r7
 800361e:	f000 faf3 	bl	8003c08 <__swhatbuf_r>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	4318      	orrs	r0, r3
 8003626:	81a0      	strh	r0, [r4, #12]
 8003628:	2d00      	cmp	r5, #0
 800362a:	d130      	bne.n	800368e <setvbuf+0x106>
 800362c:	9d00      	ldr	r5, [sp, #0]
 800362e:	4628      	mov	r0, r5
 8003630:	f000 fb4e 	bl	8003cd0 <malloc>
 8003634:	4606      	mov	r6, r0
 8003636:	2800      	cmp	r0, #0
 8003638:	d155      	bne.n	80036e6 <setvbuf+0x15e>
 800363a:	f8dd 9000 	ldr.w	r9, [sp]
 800363e:	45a9      	cmp	r9, r5
 8003640:	d14a      	bne.n	80036d8 <setvbuf+0x150>
 8003642:	f04f 35ff 	mov.w	r5, #4294967295
 8003646:	2200      	movs	r2, #0
 8003648:	60a2      	str	r2, [r4, #8]
 800364a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800364e:	6022      	str	r2, [r4, #0]
 8003650:	6122      	str	r2, [r4, #16]
 8003652:	2201      	movs	r2, #1
 8003654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003658:	6162      	str	r2, [r4, #20]
 800365a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	07d2      	lsls	r2, r2, #31
 8003662:	81a3      	strh	r3, [r4, #12]
 8003664:	d405      	bmi.n	8003672 <setvbuf+0xea>
 8003666:	f413 7f00 	tst.w	r3, #512	; 0x200
 800366a:	d102      	bne.n	8003672 <setvbuf+0xea>
 800366c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366e:	f000 faca 	bl	8003c06 <__retarget_lock_release_recursive>
 8003672:	4628      	mov	r0, r5
 8003674:	b003      	add	sp, #12
 8003676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <setvbuf+0x184>)
 800367c:	429c      	cmp	r4, r3
 800367e:	d101      	bne.n	8003684 <setvbuf+0xfc>
 8003680:	68bc      	ldr	r4, [r7, #8]
 8003682:	e793      	b.n	80035ac <setvbuf+0x24>
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <setvbuf+0x188>)
 8003686:	429c      	cmp	r4, r3
 8003688:	bf08      	it	eq
 800368a:	68fc      	ldreq	r4, [r7, #12]
 800368c:	e78e      	b.n	80035ac <setvbuf+0x24>
 800368e:	2e00      	cmp	r6, #0
 8003690:	d0cd      	beq.n	800362e <setvbuf+0xa6>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	b913      	cbnz	r3, 800369c <setvbuf+0x114>
 8003696:	4638      	mov	r0, r7
 8003698:	f000 fa16 	bl	8003ac8 <__sinit>
 800369c:	f1b8 0f01 	cmp.w	r8, #1
 80036a0:	bf08      	it	eq
 80036a2:	89a3      	ldrheq	r3, [r4, #12]
 80036a4:	6026      	str	r6, [r4, #0]
 80036a6:	bf04      	itt	eq
 80036a8:	f043 0301 	orreq.w	r3, r3, #1
 80036ac:	81a3      	strheq	r3, [r4, #12]
 80036ae:	89a2      	ldrh	r2, [r4, #12]
 80036b0:	f012 0308 	ands.w	r3, r2, #8
 80036b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80036b8:	d01c      	beq.n	80036f4 <setvbuf+0x16c>
 80036ba:	07d3      	lsls	r3, r2, #31
 80036bc:	bf41      	itttt	mi
 80036be:	2300      	movmi	r3, #0
 80036c0:	426d      	negmi	r5, r5
 80036c2:	60a3      	strmi	r3, [r4, #8]
 80036c4:	61a5      	strmi	r5, [r4, #24]
 80036c6:	bf58      	it	pl
 80036c8:	60a5      	strpl	r5, [r4, #8]
 80036ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036cc:	f015 0501 	ands.w	r5, r5, #1
 80036d0:	d115      	bne.n	80036fe <setvbuf+0x176>
 80036d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036d6:	e7c8      	b.n	800366a <setvbuf+0xe2>
 80036d8:	4648      	mov	r0, r9
 80036da:	f000 faf9 	bl	8003cd0 <malloc>
 80036de:	4606      	mov	r6, r0
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d0ae      	beq.n	8003642 <setvbuf+0xba>
 80036e4:	464d      	mov	r5, r9
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	e7d0      	b.n	8003692 <setvbuf+0x10a>
 80036f0:	2500      	movs	r5, #0
 80036f2:	e7a8      	b.n	8003646 <setvbuf+0xbe>
 80036f4:	60a3      	str	r3, [r4, #8]
 80036f6:	e7e8      	b.n	80036ca <setvbuf+0x142>
 80036f8:	f04f 35ff 	mov.w	r5, #4294967295
 80036fc:	e7b9      	b.n	8003672 <setvbuf+0xea>
 80036fe:	2500      	movs	r5, #0
 8003700:	e7b7      	b.n	8003672 <setvbuf+0xea>
 8003702:	bf00      	nop
 8003704:	2000005c 	.word	0x2000005c
 8003708:	08004844 	.word	0x08004844
 800370c:	08004864 	.word	0x08004864
 8003710:	08004824 	.word	0x08004824

08003714 <__swbuf_r>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	460e      	mov	r6, r1
 8003718:	4614      	mov	r4, r2
 800371a:	4605      	mov	r5, r0
 800371c:	b118      	cbz	r0, 8003726 <__swbuf_r+0x12>
 800371e:	6983      	ldr	r3, [r0, #24]
 8003720:	b90b      	cbnz	r3, 8003726 <__swbuf_r+0x12>
 8003722:	f000 f9d1 	bl	8003ac8 <__sinit>
 8003726:	4b21      	ldr	r3, [pc, #132]	; (80037ac <__swbuf_r+0x98>)
 8003728:	429c      	cmp	r4, r3
 800372a:	d12b      	bne.n	8003784 <__swbuf_r+0x70>
 800372c:	686c      	ldr	r4, [r5, #4]
 800372e:	69a3      	ldr	r3, [r4, #24]
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	071a      	lsls	r2, r3, #28
 8003736:	d52f      	bpl.n	8003798 <__swbuf_r+0x84>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	b36b      	cbz	r3, 8003798 <__swbuf_r+0x84>
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	6820      	ldr	r0, [r4, #0]
 8003740:	1ac0      	subs	r0, r0, r3
 8003742:	6963      	ldr	r3, [r4, #20]
 8003744:	b2f6      	uxtb	r6, r6
 8003746:	4283      	cmp	r3, r0
 8003748:	4637      	mov	r7, r6
 800374a:	dc04      	bgt.n	8003756 <__swbuf_r+0x42>
 800374c:	4621      	mov	r1, r4
 800374e:	4628      	mov	r0, r5
 8003750:	f000 f926 	bl	80039a0 <_fflush_r>
 8003754:	bb30      	cbnz	r0, 80037a4 <__swbuf_r+0x90>
 8003756:	68a3      	ldr	r3, [r4, #8]
 8003758:	3b01      	subs	r3, #1
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	701e      	strb	r6, [r3, #0]
 8003764:	6963      	ldr	r3, [r4, #20]
 8003766:	3001      	adds	r0, #1
 8003768:	4283      	cmp	r3, r0
 800376a:	d004      	beq.n	8003776 <__swbuf_r+0x62>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	07db      	lsls	r3, r3, #31
 8003770:	d506      	bpl.n	8003780 <__swbuf_r+0x6c>
 8003772:	2e0a      	cmp	r6, #10
 8003774:	d104      	bne.n	8003780 <__swbuf_r+0x6c>
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	f000 f911 	bl	80039a0 <_fflush_r>
 800377e:	b988      	cbnz	r0, 80037a4 <__swbuf_r+0x90>
 8003780:	4638      	mov	r0, r7
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <__swbuf_r+0x9c>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d101      	bne.n	800378e <__swbuf_r+0x7a>
 800378a:	68ac      	ldr	r4, [r5, #8]
 800378c:	e7cf      	b.n	800372e <__swbuf_r+0x1a>
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <__swbuf_r+0xa0>)
 8003790:	429c      	cmp	r4, r3
 8003792:	bf08      	it	eq
 8003794:	68ec      	ldreq	r4, [r5, #12]
 8003796:	e7ca      	b.n	800372e <__swbuf_r+0x1a>
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 f80c 	bl	80037b8 <__swsetup_r>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d0cb      	beq.n	800373c <__swbuf_r+0x28>
 80037a4:	f04f 37ff 	mov.w	r7, #4294967295
 80037a8:	e7ea      	b.n	8003780 <__swbuf_r+0x6c>
 80037aa:	bf00      	nop
 80037ac:	08004844 	.word	0x08004844
 80037b0:	08004864 	.word	0x08004864
 80037b4:	08004824 	.word	0x08004824

080037b8 <__swsetup_r>:
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <__swsetup_r+0xcc>)
 80037ba:	b570      	push	{r4, r5, r6, lr}
 80037bc:	681d      	ldr	r5, [r3, #0]
 80037be:	4606      	mov	r6, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	b125      	cbz	r5, 80037ce <__swsetup_r+0x16>
 80037c4:	69ab      	ldr	r3, [r5, #24]
 80037c6:	b913      	cbnz	r3, 80037ce <__swsetup_r+0x16>
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 f97d 	bl	8003ac8 <__sinit>
 80037ce:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <__swsetup_r+0xd0>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d10f      	bne.n	80037f4 <__swsetup_r+0x3c>
 80037d4:	686c      	ldr	r4, [r5, #4]
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037dc:	0719      	lsls	r1, r3, #28
 80037de:	d42c      	bmi.n	800383a <__swsetup_r+0x82>
 80037e0:	06dd      	lsls	r5, r3, #27
 80037e2:	d411      	bmi.n	8003808 <__swsetup_r+0x50>
 80037e4:	2309      	movs	r3, #9
 80037e6:	6033      	str	r3, [r6, #0]
 80037e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	f04f 30ff 	mov.w	r0, #4294967295
 80037f2:	e03e      	b.n	8003872 <__swsetup_r+0xba>
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <__swsetup_r+0xd4>)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d101      	bne.n	80037fe <__swsetup_r+0x46>
 80037fa:	68ac      	ldr	r4, [r5, #8]
 80037fc:	e7eb      	b.n	80037d6 <__swsetup_r+0x1e>
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <__swsetup_r+0xd8>)
 8003800:	429c      	cmp	r4, r3
 8003802:	bf08      	it	eq
 8003804:	68ec      	ldreq	r4, [r5, #12]
 8003806:	e7e6      	b.n	80037d6 <__swsetup_r+0x1e>
 8003808:	0758      	lsls	r0, r3, #29
 800380a:	d512      	bpl.n	8003832 <__swsetup_r+0x7a>
 800380c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800380e:	b141      	cbz	r1, 8003822 <__swsetup_r+0x6a>
 8003810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003814:	4299      	cmp	r1, r3
 8003816:	d002      	beq.n	800381e <__swsetup_r+0x66>
 8003818:	4630      	mov	r0, r6
 800381a:	f000 fa61 	bl	8003ce0 <_free_r>
 800381e:	2300      	movs	r3, #0
 8003820:	6363      	str	r3, [r4, #52]	; 0x34
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	2300      	movs	r3, #0
 800382c:	6063      	str	r3, [r4, #4]
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	b94b      	cbnz	r3, 8003852 <__swsetup_r+0x9a>
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003848:	d003      	beq.n	8003852 <__swsetup_r+0x9a>
 800384a:	4621      	mov	r1, r4
 800384c:	4630      	mov	r0, r6
 800384e:	f000 f9ff 	bl	8003c50 <__smakebuf_r>
 8003852:	89a0      	ldrh	r0, [r4, #12]
 8003854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003858:	f010 0301 	ands.w	r3, r0, #1
 800385c:	d00a      	beq.n	8003874 <__swsetup_r+0xbc>
 800385e:	2300      	movs	r3, #0
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	6963      	ldr	r3, [r4, #20]
 8003864:	425b      	negs	r3, r3
 8003866:	61a3      	str	r3, [r4, #24]
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	b943      	cbnz	r3, 800387e <__swsetup_r+0xc6>
 800386c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003870:	d1ba      	bne.n	80037e8 <__swsetup_r+0x30>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	0781      	lsls	r1, r0, #30
 8003876:	bf58      	it	pl
 8003878:	6963      	ldrpl	r3, [r4, #20]
 800387a:	60a3      	str	r3, [r4, #8]
 800387c:	e7f4      	b.n	8003868 <__swsetup_r+0xb0>
 800387e:	2000      	movs	r0, #0
 8003880:	e7f7      	b.n	8003872 <__swsetup_r+0xba>
 8003882:	bf00      	nop
 8003884:	2000005c 	.word	0x2000005c
 8003888:	08004844 	.word	0x08004844
 800388c:	08004864 	.word	0x08004864
 8003890:	08004824 	.word	0x08004824

08003894 <__sflush_r>:
 8003894:	898a      	ldrh	r2, [r1, #12]
 8003896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389a:	4605      	mov	r5, r0
 800389c:	0710      	lsls	r0, r2, #28
 800389e:	460c      	mov	r4, r1
 80038a0:	d458      	bmi.n	8003954 <__sflush_r+0xc0>
 80038a2:	684b      	ldr	r3, [r1, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	dc05      	bgt.n	80038b4 <__sflush_r+0x20>
 80038a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	dc02      	bgt.n	80038b4 <__sflush_r+0x20>
 80038ae:	2000      	movs	r0, #0
 80038b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038b6:	2e00      	cmp	r6, #0
 80038b8:	d0f9      	beq.n	80038ae <__sflush_r+0x1a>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038c0:	682f      	ldr	r7, [r5, #0]
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	d032      	beq.n	800392c <__sflush_r+0x98>
 80038c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	075a      	lsls	r2, r3, #29
 80038cc:	d505      	bpl.n	80038da <__sflush_r+0x46>
 80038ce:	6863      	ldr	r3, [r4, #4]
 80038d0:	1ac0      	subs	r0, r0, r3
 80038d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038d4:	b10b      	cbz	r3, 80038da <__sflush_r+0x46>
 80038d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038d8:	1ac0      	subs	r0, r0, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	4602      	mov	r2, r0
 80038de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038e0:	6a21      	ldr	r1, [r4, #32]
 80038e2:	4628      	mov	r0, r5
 80038e4:	47b0      	blx	r6
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	d106      	bne.n	80038fa <__sflush_r+0x66>
 80038ec:	6829      	ldr	r1, [r5, #0]
 80038ee:	291d      	cmp	r1, #29
 80038f0:	d82c      	bhi.n	800394c <__sflush_r+0xb8>
 80038f2:	4a2a      	ldr	r2, [pc, #168]	; (800399c <__sflush_r+0x108>)
 80038f4:	40ca      	lsrs	r2, r1
 80038f6:	07d6      	lsls	r6, r2, #31
 80038f8:	d528      	bpl.n	800394c <__sflush_r+0xb8>
 80038fa:	2200      	movs	r2, #0
 80038fc:	6062      	str	r2, [r4, #4]
 80038fe:	04d9      	lsls	r1, r3, #19
 8003900:	6922      	ldr	r2, [r4, #16]
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	d504      	bpl.n	8003910 <__sflush_r+0x7c>
 8003906:	1c42      	adds	r2, r0, #1
 8003908:	d101      	bne.n	800390e <__sflush_r+0x7a>
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	b903      	cbnz	r3, 8003910 <__sflush_r+0x7c>
 800390e:	6560      	str	r0, [r4, #84]	; 0x54
 8003910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003912:	602f      	str	r7, [r5, #0]
 8003914:	2900      	cmp	r1, #0
 8003916:	d0ca      	beq.n	80038ae <__sflush_r+0x1a>
 8003918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800391c:	4299      	cmp	r1, r3
 800391e:	d002      	beq.n	8003926 <__sflush_r+0x92>
 8003920:	4628      	mov	r0, r5
 8003922:	f000 f9dd 	bl	8003ce0 <_free_r>
 8003926:	2000      	movs	r0, #0
 8003928:	6360      	str	r0, [r4, #52]	; 0x34
 800392a:	e7c1      	b.n	80038b0 <__sflush_r+0x1c>
 800392c:	6a21      	ldr	r1, [r4, #32]
 800392e:	2301      	movs	r3, #1
 8003930:	4628      	mov	r0, r5
 8003932:	47b0      	blx	r6
 8003934:	1c41      	adds	r1, r0, #1
 8003936:	d1c7      	bne.n	80038c8 <__sflush_r+0x34>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0c4      	beq.n	80038c8 <__sflush_r+0x34>
 800393e:	2b1d      	cmp	r3, #29
 8003940:	d001      	beq.n	8003946 <__sflush_r+0xb2>
 8003942:	2b16      	cmp	r3, #22
 8003944:	d101      	bne.n	800394a <__sflush_r+0xb6>
 8003946:	602f      	str	r7, [r5, #0]
 8003948:	e7b1      	b.n	80038ae <__sflush_r+0x1a>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	e7ad      	b.n	80038b0 <__sflush_r+0x1c>
 8003954:	690f      	ldr	r7, [r1, #16]
 8003956:	2f00      	cmp	r7, #0
 8003958:	d0a9      	beq.n	80038ae <__sflush_r+0x1a>
 800395a:	0793      	lsls	r3, r2, #30
 800395c:	680e      	ldr	r6, [r1, #0]
 800395e:	bf08      	it	eq
 8003960:	694b      	ldreq	r3, [r1, #20]
 8003962:	600f      	str	r7, [r1, #0]
 8003964:	bf18      	it	ne
 8003966:	2300      	movne	r3, #0
 8003968:	eba6 0807 	sub.w	r8, r6, r7
 800396c:	608b      	str	r3, [r1, #8]
 800396e:	f1b8 0f00 	cmp.w	r8, #0
 8003972:	dd9c      	ble.n	80038ae <__sflush_r+0x1a>
 8003974:	6a21      	ldr	r1, [r4, #32]
 8003976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003978:	4643      	mov	r3, r8
 800397a:	463a      	mov	r2, r7
 800397c:	4628      	mov	r0, r5
 800397e:	47b0      	blx	r6
 8003980:	2800      	cmp	r0, #0
 8003982:	dc06      	bgt.n	8003992 <__sflush_r+0xfe>
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	e78e      	b.n	80038b0 <__sflush_r+0x1c>
 8003992:	4407      	add	r7, r0
 8003994:	eba8 0800 	sub.w	r8, r8, r0
 8003998:	e7e9      	b.n	800396e <__sflush_r+0xda>
 800399a:	bf00      	nop
 800399c:	20400001 	.word	0x20400001

080039a0 <_fflush_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	690b      	ldr	r3, [r1, #16]
 80039a4:	4605      	mov	r5, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	b913      	cbnz	r3, 80039b0 <_fflush_r+0x10>
 80039aa:	2500      	movs	r5, #0
 80039ac:	4628      	mov	r0, r5
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	b118      	cbz	r0, 80039ba <_fflush_r+0x1a>
 80039b2:	6983      	ldr	r3, [r0, #24]
 80039b4:	b90b      	cbnz	r3, 80039ba <_fflush_r+0x1a>
 80039b6:	f000 f887 	bl	8003ac8 <__sinit>
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <_fflush_r+0x6c>)
 80039bc:	429c      	cmp	r4, r3
 80039be:	d11b      	bne.n	80039f8 <_fflush_r+0x58>
 80039c0:	686c      	ldr	r4, [r5, #4]
 80039c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ef      	beq.n	80039aa <_fflush_r+0xa>
 80039ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039cc:	07d0      	lsls	r0, r2, #31
 80039ce:	d404      	bmi.n	80039da <_fflush_r+0x3a>
 80039d0:	0599      	lsls	r1, r3, #22
 80039d2:	d402      	bmi.n	80039da <_fflush_r+0x3a>
 80039d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d6:	f000 f915 	bl	8003c04 <__retarget_lock_acquire_recursive>
 80039da:	4628      	mov	r0, r5
 80039dc:	4621      	mov	r1, r4
 80039de:	f7ff ff59 	bl	8003894 <__sflush_r>
 80039e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039e4:	07da      	lsls	r2, r3, #31
 80039e6:	4605      	mov	r5, r0
 80039e8:	d4e0      	bmi.n	80039ac <_fflush_r+0xc>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	059b      	lsls	r3, r3, #22
 80039ee:	d4dd      	bmi.n	80039ac <_fflush_r+0xc>
 80039f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039f2:	f000 f908 	bl	8003c06 <__retarget_lock_release_recursive>
 80039f6:	e7d9      	b.n	80039ac <_fflush_r+0xc>
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <_fflush_r+0x70>)
 80039fa:	429c      	cmp	r4, r3
 80039fc:	d101      	bne.n	8003a02 <_fflush_r+0x62>
 80039fe:	68ac      	ldr	r4, [r5, #8]
 8003a00:	e7df      	b.n	80039c2 <_fflush_r+0x22>
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <_fflush_r+0x74>)
 8003a04:	429c      	cmp	r4, r3
 8003a06:	bf08      	it	eq
 8003a08:	68ec      	ldreq	r4, [r5, #12]
 8003a0a:	e7da      	b.n	80039c2 <_fflush_r+0x22>
 8003a0c:	08004844 	.word	0x08004844
 8003a10:	08004864 	.word	0x08004864
 8003a14:	08004824 	.word	0x08004824

08003a18 <std>:
 8003a18:	2300      	movs	r3, #0
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a26:	6083      	str	r3, [r0, #8]
 8003a28:	8181      	strh	r1, [r0, #12]
 8003a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a2c:	81c2      	strh	r2, [r0, #14]
 8003a2e:	6183      	str	r3, [r0, #24]
 8003a30:	4619      	mov	r1, r3
 8003a32:	2208      	movs	r2, #8
 8003a34:	305c      	adds	r0, #92	; 0x5c
 8003a36:	f7ff fd09 	bl	800344c <memset>
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <std+0x38>)
 8003a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <std+0x3c>)
 8003a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <std+0x40>)
 8003a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <std+0x44>)
 8003a48:	6224      	str	r4, [r4, #32]
 8003a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	bf00      	nop
 8003a50:	08004431 	.word	0x08004431
 8003a54:	08004453 	.word	0x08004453
 8003a58:	0800448b 	.word	0x0800448b
 8003a5c:	080044af 	.word	0x080044af

08003a60 <_cleanup_r>:
 8003a60:	4901      	ldr	r1, [pc, #4]	; (8003a68 <_cleanup_r+0x8>)
 8003a62:	f000 b8af 	b.w	8003bc4 <_fwalk_reent>
 8003a66:	bf00      	nop
 8003a68:	080039a1 	.word	0x080039a1

08003a6c <__sfmoreglue>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	1e4a      	subs	r2, r1, #1
 8003a70:	2568      	movs	r5, #104	; 0x68
 8003a72:	4355      	muls	r5, r2
 8003a74:	460e      	mov	r6, r1
 8003a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a7a:	f000 f981 	bl	8003d80 <_malloc_r>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	b140      	cbz	r0, 8003a94 <__sfmoreglue+0x28>
 8003a82:	2100      	movs	r1, #0
 8003a84:	e9c0 1600 	strd	r1, r6, [r0]
 8003a88:	300c      	adds	r0, #12
 8003a8a:	60a0      	str	r0, [r4, #8]
 8003a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a90:	f7ff fcdc 	bl	800344c <memset>
 8003a94:	4620      	mov	r0, r4
 8003a96:	bd70      	pop	{r4, r5, r6, pc}

08003a98 <__sfp_lock_acquire>:
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <__sfp_lock_acquire+0x8>)
 8003a9a:	f000 b8b3 	b.w	8003c04 <__retarget_lock_acquire_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	20000170 	.word	0x20000170

08003aa4 <__sfp_lock_release>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	; (8003aac <__sfp_lock_release+0x8>)
 8003aa6:	f000 b8ae 	b.w	8003c06 <__retarget_lock_release_recursive>
 8003aaa:	bf00      	nop
 8003aac:	20000170 	.word	0x20000170

08003ab0 <__sinit_lock_acquire>:
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <__sinit_lock_acquire+0x8>)
 8003ab2:	f000 b8a7 	b.w	8003c04 <__retarget_lock_acquire_recursive>
 8003ab6:	bf00      	nop
 8003ab8:	2000016b 	.word	0x2000016b

08003abc <__sinit_lock_release>:
 8003abc:	4801      	ldr	r0, [pc, #4]	; (8003ac4 <__sinit_lock_release+0x8>)
 8003abe:	f000 b8a2 	b.w	8003c06 <__retarget_lock_release_recursive>
 8003ac2:	bf00      	nop
 8003ac4:	2000016b 	.word	0x2000016b

08003ac8 <__sinit>:
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	4604      	mov	r4, r0
 8003acc:	f7ff fff0 	bl	8003ab0 <__sinit_lock_acquire>
 8003ad0:	69a3      	ldr	r3, [r4, #24]
 8003ad2:	b11b      	cbz	r3, 8003adc <__sinit+0x14>
 8003ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad8:	f7ff bff0 	b.w	8003abc <__sinit_lock_release>
 8003adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <__sinit+0x68>)
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <__sinit+0x6c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	bf04      	itt	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	61a3      	streq	r3, [r4, #24]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f000 f820 	bl	8003b38 <__sfp>
 8003af8:	6060      	str	r0, [r4, #4]
 8003afa:	4620      	mov	r0, r4
 8003afc:	f000 f81c 	bl	8003b38 <__sfp>
 8003b00:	60a0      	str	r0, [r4, #8]
 8003b02:	4620      	mov	r0, r4
 8003b04:	f000 f818 	bl	8003b38 <__sfp>
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60e0      	str	r0, [r4, #12]
 8003b0c:	2104      	movs	r1, #4
 8003b0e:	6860      	ldr	r0, [r4, #4]
 8003b10:	f7ff ff82 	bl	8003a18 <std>
 8003b14:	68a0      	ldr	r0, [r4, #8]
 8003b16:	2201      	movs	r2, #1
 8003b18:	2109      	movs	r1, #9
 8003b1a:	f7ff ff7d 	bl	8003a18 <std>
 8003b1e:	68e0      	ldr	r0, [r4, #12]
 8003b20:	2202      	movs	r2, #2
 8003b22:	2112      	movs	r1, #18
 8003b24:	f7ff ff78 	bl	8003a18 <std>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61a3      	str	r3, [r4, #24]
 8003b2c:	e7d2      	b.n	8003ad4 <__sinit+0xc>
 8003b2e:	bf00      	nop
 8003b30:	08004820 	.word	0x08004820
 8003b34:	08003a61 	.word	0x08003a61

08003b38 <__sfp>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	f7ff ffac 	bl	8003a98 <__sfp_lock_acquire>
 8003b40:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <__sfp+0x84>)
 8003b42:	681e      	ldr	r6, [r3, #0]
 8003b44:	69b3      	ldr	r3, [r6, #24]
 8003b46:	b913      	cbnz	r3, 8003b4e <__sfp+0x16>
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f7ff ffbd 	bl	8003ac8 <__sinit>
 8003b4e:	3648      	adds	r6, #72	; 0x48
 8003b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	d503      	bpl.n	8003b60 <__sfp+0x28>
 8003b58:	6833      	ldr	r3, [r6, #0]
 8003b5a:	b30b      	cbz	r3, 8003ba0 <__sfp+0x68>
 8003b5c:	6836      	ldr	r6, [r6, #0]
 8003b5e:	e7f7      	b.n	8003b50 <__sfp+0x18>
 8003b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b64:	b9d5      	cbnz	r5, 8003b9c <__sfp+0x64>
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <__sfp+0x88>)
 8003b68:	60e3      	str	r3, [r4, #12]
 8003b6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b70:	f000 f847 	bl	8003c02 <__retarget_lock_init_recursive>
 8003b74:	f7ff ff96 	bl	8003aa4 <__sfp_lock_release>
 8003b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b80:	6025      	str	r5, [r4, #0]
 8003b82:	61a5      	str	r5, [r4, #24]
 8003b84:	2208      	movs	r2, #8
 8003b86:	4629      	mov	r1, r5
 8003b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b8c:	f7ff fc5e 	bl	800344c <memset>
 8003b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b98:	4620      	mov	r0, r4
 8003b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9c:	3468      	adds	r4, #104	; 0x68
 8003b9e:	e7d9      	b.n	8003b54 <__sfp+0x1c>
 8003ba0:	2104      	movs	r1, #4
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f7ff ff62 	bl	8003a6c <__sfmoreglue>
 8003ba8:	4604      	mov	r4, r0
 8003baa:	6030      	str	r0, [r6, #0]
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1d5      	bne.n	8003b5c <__sfp+0x24>
 8003bb0:	f7ff ff78 	bl	8003aa4 <__sfp_lock_release>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	e7ee      	b.n	8003b98 <__sfp+0x60>
 8003bba:	bf00      	nop
 8003bbc:	08004820 	.word	0x08004820
 8003bc0:	ffff0001 	.word	0xffff0001

08003bc4 <_fwalk_reent>:
 8003bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc8:	4606      	mov	r6, r0
 8003bca:	4688      	mov	r8, r1
 8003bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bd0:	2700      	movs	r7, #0
 8003bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8003bda:	d505      	bpl.n	8003be8 <_fwalk_reent+0x24>
 8003bdc:	6824      	ldr	r4, [r4, #0]
 8003bde:	2c00      	cmp	r4, #0
 8003be0:	d1f7      	bne.n	8003bd2 <_fwalk_reent+0xe>
 8003be2:	4638      	mov	r0, r7
 8003be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be8:	89ab      	ldrh	r3, [r5, #12]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d907      	bls.n	8003bfe <_fwalk_reent+0x3a>
 8003bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	d003      	beq.n	8003bfe <_fwalk_reent+0x3a>
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	47c0      	blx	r8
 8003bfc:	4307      	orrs	r7, r0
 8003bfe:	3568      	adds	r5, #104	; 0x68
 8003c00:	e7e9      	b.n	8003bd6 <_fwalk_reent+0x12>

08003c02 <__retarget_lock_init_recursive>:
 8003c02:	4770      	bx	lr

08003c04 <__retarget_lock_acquire_recursive>:
 8003c04:	4770      	bx	lr

08003c06 <__retarget_lock_release_recursive>:
 8003c06:	4770      	bx	lr

08003c08 <__swhatbuf_r>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	460e      	mov	r6, r1
 8003c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c10:	2900      	cmp	r1, #0
 8003c12:	b096      	sub	sp, #88	; 0x58
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	da07      	bge.n	8003c2a <__swhatbuf_r+0x22>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	89b3      	ldrh	r3, [r6, #12]
 8003c20:	061a      	lsls	r2, r3, #24
 8003c22:	d410      	bmi.n	8003c46 <__swhatbuf_r+0x3e>
 8003c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c28:	e00e      	b.n	8003c48 <__swhatbuf_r+0x40>
 8003c2a:	466a      	mov	r2, sp
 8003c2c:	f000 fc66 	bl	80044fc <_fstat_r>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	dbf2      	blt.n	8003c1a <__swhatbuf_r+0x12>
 8003c34:	9a01      	ldr	r2, [sp, #4]
 8003c36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c3e:	425a      	negs	r2, r3
 8003c40:	415a      	adcs	r2, r3
 8003c42:	602a      	str	r2, [r5, #0]
 8003c44:	e7ee      	b.n	8003c24 <__swhatbuf_r+0x1c>
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	2000      	movs	r0, #0
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	b016      	add	sp, #88	; 0x58
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}

08003c50 <__smakebuf_r>:
 8003c50:	898b      	ldrh	r3, [r1, #12]
 8003c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c54:	079d      	lsls	r5, r3, #30
 8003c56:	4606      	mov	r6, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	d507      	bpl.n	8003c6c <__smakebuf_r+0x1c>
 8003c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	6123      	str	r3, [r4, #16]
 8003c64:	2301      	movs	r3, #1
 8003c66:	6163      	str	r3, [r4, #20]
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	ab01      	add	r3, sp, #4
 8003c6e:	466a      	mov	r2, sp
 8003c70:	f7ff ffca 	bl	8003c08 <__swhatbuf_r>
 8003c74:	9900      	ldr	r1, [sp, #0]
 8003c76:	4605      	mov	r5, r0
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f000 f881 	bl	8003d80 <_malloc_r>
 8003c7e:	b948      	cbnz	r0, 8003c94 <__smakebuf_r+0x44>
 8003c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c84:	059a      	lsls	r2, r3, #22
 8003c86:	d4ef      	bmi.n	8003c68 <__smakebuf_r+0x18>
 8003c88:	f023 0303 	bic.w	r3, r3, #3
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	e7e3      	b.n	8003c5c <__smakebuf_r+0xc>
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <__smakebuf_r+0x7c>)
 8003c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	6020      	str	r0, [r4, #0]
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	9b00      	ldr	r3, [sp, #0]
 8003ca4:	6163      	str	r3, [r4, #20]
 8003ca6:	9b01      	ldr	r3, [sp, #4]
 8003ca8:	6120      	str	r0, [r4, #16]
 8003caa:	b15b      	cbz	r3, 8003cc4 <__smakebuf_r+0x74>
 8003cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f000 fc35 	bl	8004520 <_isatty_r>
 8003cb6:	b128      	cbz	r0, 8003cc4 <__smakebuf_r+0x74>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	89a0      	ldrh	r0, [r4, #12]
 8003cc6:	4305      	orrs	r5, r0
 8003cc8:	81a5      	strh	r5, [r4, #12]
 8003cca:	e7cd      	b.n	8003c68 <__smakebuf_r+0x18>
 8003ccc:	08003a61 	.word	0x08003a61

08003cd0 <malloc>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <malloc+0xc>)
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f000 b853 	b.w	8003d80 <_malloc_r>
 8003cda:	bf00      	nop
 8003cdc:	2000005c 	.word	0x2000005c

08003ce0 <_free_r>:
 8003ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	d048      	beq.n	8003d78 <_free_r+0x98>
 8003ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cea:	9001      	str	r0, [sp, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f1a1 0404 	sub.w	r4, r1, #4
 8003cf2:	bfb8      	it	lt
 8003cf4:	18e4      	addlt	r4, r4, r3
 8003cf6:	f000 fc35 	bl	8004564 <__malloc_lock>
 8003cfa:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <_free_r+0x9c>)
 8003cfc:	9801      	ldr	r0, [sp, #4]
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	4615      	mov	r5, r2
 8003d02:	b933      	cbnz	r3, 8003d12 <_free_r+0x32>
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	6014      	str	r4, [r2, #0]
 8003d08:	b003      	add	sp, #12
 8003d0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d0e:	f000 bc2f 	b.w	8004570 <__malloc_unlock>
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	d90b      	bls.n	8003d2e <_free_r+0x4e>
 8003d16:	6821      	ldr	r1, [r4, #0]
 8003d18:	1862      	adds	r2, r4, r1
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bf04      	itt	eq
 8003d1e:	681a      	ldreq	r2, [r3, #0]
 8003d20:	685b      	ldreq	r3, [r3, #4]
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	bf04      	itt	eq
 8003d26:	1852      	addeq	r2, r2, r1
 8003d28:	6022      	streq	r2, [r4, #0]
 8003d2a:	602c      	str	r4, [r5, #0]
 8003d2c:	e7ec      	b.n	8003d08 <_free_r+0x28>
 8003d2e:	461a      	mov	r2, r3
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b10b      	cbz	r3, 8003d38 <_free_r+0x58>
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d9fa      	bls.n	8003d2e <_free_r+0x4e>
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	1855      	adds	r5, r2, r1
 8003d3c:	42a5      	cmp	r5, r4
 8003d3e:	d10b      	bne.n	8003d58 <_free_r+0x78>
 8003d40:	6824      	ldr	r4, [r4, #0]
 8003d42:	4421      	add	r1, r4
 8003d44:	1854      	adds	r4, r2, r1
 8003d46:	42a3      	cmp	r3, r4
 8003d48:	6011      	str	r1, [r2, #0]
 8003d4a:	d1dd      	bne.n	8003d08 <_free_r+0x28>
 8003d4c:	681c      	ldr	r4, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	6053      	str	r3, [r2, #4]
 8003d52:	4421      	add	r1, r4
 8003d54:	6011      	str	r1, [r2, #0]
 8003d56:	e7d7      	b.n	8003d08 <_free_r+0x28>
 8003d58:	d902      	bls.n	8003d60 <_free_r+0x80>
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	6003      	str	r3, [r0, #0]
 8003d5e:	e7d3      	b.n	8003d08 <_free_r+0x28>
 8003d60:	6825      	ldr	r5, [r4, #0]
 8003d62:	1961      	adds	r1, r4, r5
 8003d64:	428b      	cmp	r3, r1
 8003d66:	bf04      	itt	eq
 8003d68:	6819      	ldreq	r1, [r3, #0]
 8003d6a:	685b      	ldreq	r3, [r3, #4]
 8003d6c:	6063      	str	r3, [r4, #4]
 8003d6e:	bf04      	itt	eq
 8003d70:	1949      	addeq	r1, r1, r5
 8003d72:	6021      	streq	r1, [r4, #0]
 8003d74:	6054      	str	r4, [r2, #4]
 8003d76:	e7c7      	b.n	8003d08 <_free_r+0x28>
 8003d78:	b003      	add	sp, #12
 8003d7a:	bd30      	pop	{r4, r5, pc}
 8003d7c:	20000104 	.word	0x20000104

08003d80 <_malloc_r>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	1ccd      	adds	r5, r1, #3
 8003d84:	f025 0503 	bic.w	r5, r5, #3
 8003d88:	3508      	adds	r5, #8
 8003d8a:	2d0c      	cmp	r5, #12
 8003d8c:	bf38      	it	cc
 8003d8e:	250c      	movcc	r5, #12
 8003d90:	2d00      	cmp	r5, #0
 8003d92:	4606      	mov	r6, r0
 8003d94:	db01      	blt.n	8003d9a <_malloc_r+0x1a>
 8003d96:	42a9      	cmp	r1, r5
 8003d98:	d903      	bls.n	8003da2 <_malloc_r+0x22>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	2000      	movs	r0, #0
 8003da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da2:	f000 fbdf 	bl	8004564 <__malloc_lock>
 8003da6:	4921      	ldr	r1, [pc, #132]	; (8003e2c <_malloc_r+0xac>)
 8003da8:	680a      	ldr	r2, [r1, #0]
 8003daa:	4614      	mov	r4, r2
 8003dac:	b99c      	cbnz	r4, 8003dd6 <_malloc_r+0x56>
 8003dae:	4f20      	ldr	r7, [pc, #128]	; (8003e30 <_malloc_r+0xb0>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b923      	cbnz	r3, 8003dbe <_malloc_r+0x3e>
 8003db4:	4621      	mov	r1, r4
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 fb2a 	bl	8004410 <_sbrk_r>
 8003dbc:	6038      	str	r0, [r7, #0]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f000 fb25 	bl	8004410 <_sbrk_r>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	d123      	bne.n	8003e12 <_malloc_r+0x92>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f000 fbce 	bl	8004570 <__malloc_unlock>
 8003dd4:	e7e3      	b.n	8003d9e <_malloc_r+0x1e>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	1b5b      	subs	r3, r3, r5
 8003dda:	d417      	bmi.n	8003e0c <_malloc_r+0x8c>
 8003ddc:	2b0b      	cmp	r3, #11
 8003dde:	d903      	bls.n	8003de8 <_malloc_r+0x68>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	441c      	add	r4, r3
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	e004      	b.n	8003df2 <_malloc_r+0x72>
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	42a2      	cmp	r2, r4
 8003dec:	bf0c      	ite	eq
 8003dee:	600b      	streq	r3, [r1, #0]
 8003df0:	6053      	strne	r3, [r2, #4]
 8003df2:	4630      	mov	r0, r6
 8003df4:	f000 fbbc 	bl	8004570 <__malloc_unlock>
 8003df8:	f104 000b 	add.w	r0, r4, #11
 8003dfc:	1d23      	adds	r3, r4, #4
 8003dfe:	f020 0007 	bic.w	r0, r0, #7
 8003e02:	1ac2      	subs	r2, r0, r3
 8003e04:	d0cc      	beq.n	8003da0 <_malloc_r+0x20>
 8003e06:	1a1b      	subs	r3, r3, r0
 8003e08:	50a3      	str	r3, [r4, r2]
 8003e0a:	e7c9      	b.n	8003da0 <_malloc_r+0x20>
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	6864      	ldr	r4, [r4, #4]
 8003e10:	e7cc      	b.n	8003dac <_malloc_r+0x2c>
 8003e12:	1cc4      	adds	r4, r0, #3
 8003e14:	f024 0403 	bic.w	r4, r4, #3
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d0e3      	beq.n	8003de4 <_malloc_r+0x64>
 8003e1c:	1a21      	subs	r1, r4, r0
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 faf6 	bl	8004410 <_sbrk_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d1dd      	bne.n	8003de4 <_malloc_r+0x64>
 8003e28:	e7cf      	b.n	8003dca <_malloc_r+0x4a>
 8003e2a:	bf00      	nop
 8003e2c:	20000104 	.word	0x20000104
 8003e30:	20000108 	.word	0x20000108

08003e34 <__sfputc_r>:
 8003e34:	6893      	ldr	r3, [r2, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	b410      	push	{r4}
 8003e3c:	6093      	str	r3, [r2, #8]
 8003e3e:	da08      	bge.n	8003e52 <__sfputc_r+0x1e>
 8003e40:	6994      	ldr	r4, [r2, #24]
 8003e42:	42a3      	cmp	r3, r4
 8003e44:	db01      	blt.n	8003e4a <__sfputc_r+0x16>
 8003e46:	290a      	cmp	r1, #10
 8003e48:	d103      	bne.n	8003e52 <__sfputc_r+0x1e>
 8003e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e4e:	f7ff bc61 	b.w	8003714 <__swbuf_r>
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	1c58      	adds	r0, r3, #1
 8003e56:	6010      	str	r0, [r2, #0]
 8003e58:	7019      	strb	r1, [r3, #0]
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <__sfputs_r>:
 8003e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e64:	4606      	mov	r6, r0
 8003e66:	460f      	mov	r7, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	18d5      	adds	r5, r2, r3
 8003e6c:	42ac      	cmp	r4, r5
 8003e6e:	d101      	bne.n	8003e74 <__sfputs_r+0x12>
 8003e70:	2000      	movs	r0, #0
 8003e72:	e007      	b.n	8003e84 <__sfputs_r+0x22>
 8003e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e78:	463a      	mov	r2, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7ff ffda 	bl	8003e34 <__sfputc_r>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d1f3      	bne.n	8003e6c <__sfputs_r+0xa>
 8003e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e88 <_vfiprintf_r>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	460d      	mov	r5, r1
 8003e8e:	b09d      	sub	sp, #116	; 0x74
 8003e90:	4614      	mov	r4, r2
 8003e92:	4698      	mov	r8, r3
 8003e94:	4606      	mov	r6, r0
 8003e96:	b118      	cbz	r0, 8003ea0 <_vfiprintf_r+0x18>
 8003e98:	6983      	ldr	r3, [r0, #24]
 8003e9a:	b90b      	cbnz	r3, 8003ea0 <_vfiprintf_r+0x18>
 8003e9c:	f7ff fe14 	bl	8003ac8 <__sinit>
 8003ea0:	4b89      	ldr	r3, [pc, #548]	; (80040c8 <_vfiprintf_r+0x240>)
 8003ea2:	429d      	cmp	r5, r3
 8003ea4:	d11b      	bne.n	8003ede <_vfiprintf_r+0x56>
 8003ea6:	6875      	ldr	r5, [r6, #4]
 8003ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eaa:	07d9      	lsls	r1, r3, #31
 8003eac:	d405      	bmi.n	8003eba <_vfiprintf_r+0x32>
 8003eae:	89ab      	ldrh	r3, [r5, #12]
 8003eb0:	059a      	lsls	r2, r3, #22
 8003eb2:	d402      	bmi.n	8003eba <_vfiprintf_r+0x32>
 8003eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eb6:	f7ff fea5 	bl	8003c04 <__retarget_lock_acquire_recursive>
 8003eba:	89ab      	ldrh	r3, [r5, #12]
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	d501      	bpl.n	8003ec4 <_vfiprintf_r+0x3c>
 8003ec0:	692b      	ldr	r3, [r5, #16]
 8003ec2:	b9eb      	cbnz	r3, 8003f00 <_vfiprintf_r+0x78>
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7ff fc76 	bl	80037b8 <__swsetup_r>
 8003ecc:	b1c0      	cbz	r0, 8003f00 <_vfiprintf_r+0x78>
 8003ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed0:	07dc      	lsls	r4, r3, #31
 8003ed2:	d50e      	bpl.n	8003ef2 <_vfiprintf_r+0x6a>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	b01d      	add	sp, #116	; 0x74
 8003eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ede:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <_vfiprintf_r+0x244>)
 8003ee0:	429d      	cmp	r5, r3
 8003ee2:	d101      	bne.n	8003ee8 <_vfiprintf_r+0x60>
 8003ee4:	68b5      	ldr	r5, [r6, #8]
 8003ee6:	e7df      	b.n	8003ea8 <_vfiprintf_r+0x20>
 8003ee8:	4b79      	ldr	r3, [pc, #484]	; (80040d0 <_vfiprintf_r+0x248>)
 8003eea:	429d      	cmp	r5, r3
 8003eec:	bf08      	it	eq
 8003eee:	68f5      	ldreq	r5, [r6, #12]
 8003ef0:	e7da      	b.n	8003ea8 <_vfiprintf_r+0x20>
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	0598      	lsls	r0, r3, #22
 8003ef6:	d4ed      	bmi.n	8003ed4 <_vfiprintf_r+0x4c>
 8003ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003efa:	f7ff fe84 	bl	8003c06 <__retarget_lock_release_recursive>
 8003efe:	e7e9      	b.n	8003ed4 <_vfiprintf_r+0x4c>
 8003f00:	2300      	movs	r3, #0
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	2320      	movs	r3, #32
 8003f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f0e:	2330      	movs	r3, #48	; 0x30
 8003f10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040d4 <_vfiprintf_r+0x24c>
 8003f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f18:	f04f 0901 	mov.w	r9, #1
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	469a      	mov	sl, r3
 8003f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f24:	b10a      	cbz	r2, 8003f2a <_vfiprintf_r+0xa2>
 8003f26:	2a25      	cmp	r2, #37	; 0x25
 8003f28:	d1f9      	bne.n	8003f1e <_vfiprintf_r+0x96>
 8003f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f2e:	d00b      	beq.n	8003f48 <_vfiprintf_r+0xc0>
 8003f30:	465b      	mov	r3, fp
 8003f32:	4622      	mov	r2, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	4630      	mov	r0, r6
 8003f38:	f7ff ff93 	bl	8003e62 <__sfputs_r>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f000 80aa 	beq.w	8004096 <_vfiprintf_r+0x20e>
 8003f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f44:	445a      	add	r2, fp
 8003f46:	9209      	str	r2, [sp, #36]	; 0x24
 8003f48:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a2 	beq.w	8004096 <_vfiprintf_r+0x20e>
 8003f52:	2300      	movs	r3, #0
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f5c:	f10a 0a01 	add.w	sl, sl, #1
 8003f60:	9304      	str	r3, [sp, #16]
 8003f62:	9307      	str	r3, [sp, #28]
 8003f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f68:	931a      	str	r3, [sp, #104]	; 0x68
 8003f6a:	4654      	mov	r4, sl
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f72:	4858      	ldr	r0, [pc, #352]	; (80040d4 <_vfiprintf_r+0x24c>)
 8003f74:	f7fc f954 	bl	8000220 <memchr>
 8003f78:	9a04      	ldr	r2, [sp, #16]
 8003f7a:	b9d8      	cbnz	r0, 8003fb4 <_vfiprintf_r+0x12c>
 8003f7c:	06d1      	lsls	r1, r2, #27
 8003f7e:	bf44      	itt	mi
 8003f80:	2320      	movmi	r3, #32
 8003f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f86:	0713      	lsls	r3, r2, #28
 8003f88:	bf44      	itt	mi
 8003f8a:	232b      	movmi	r3, #43	; 0x2b
 8003f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f90:	f89a 3000 	ldrb.w	r3, [sl]
 8003f94:	2b2a      	cmp	r3, #42	; 0x2a
 8003f96:	d015      	beq.n	8003fc4 <_vfiprintf_r+0x13c>
 8003f98:	9a07      	ldr	r2, [sp, #28]
 8003f9a:	4654      	mov	r4, sl
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f04f 0c0a 	mov.w	ip, #10
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fa8:	3b30      	subs	r3, #48	; 0x30
 8003faa:	2b09      	cmp	r3, #9
 8003fac:	d94e      	bls.n	800404c <_vfiprintf_r+0x1c4>
 8003fae:	b1b0      	cbz	r0, 8003fde <_vfiprintf_r+0x156>
 8003fb0:	9207      	str	r2, [sp, #28]
 8003fb2:	e014      	b.n	8003fde <_vfiprintf_r+0x156>
 8003fb4:	eba0 0308 	sub.w	r3, r0, r8
 8003fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	9304      	str	r3, [sp, #16]
 8003fc0:	46a2      	mov	sl, r4
 8003fc2:	e7d2      	b.n	8003f6a <_vfiprintf_r+0xe2>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	1d19      	adds	r1, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	9103      	str	r1, [sp, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bfbb      	ittet	lt
 8003fd0:	425b      	neglt	r3, r3
 8003fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8003fd6:	9307      	strge	r3, [sp, #28]
 8003fd8:	9307      	strlt	r3, [sp, #28]
 8003fda:	bfb8      	it	lt
 8003fdc:	9204      	strlt	r2, [sp, #16]
 8003fde:	7823      	ldrb	r3, [r4, #0]
 8003fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe2:	d10c      	bne.n	8003ffe <_vfiprintf_r+0x176>
 8003fe4:	7863      	ldrb	r3, [r4, #1]
 8003fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe8:	d135      	bne.n	8004056 <_vfiprintf_r+0x1ce>
 8003fea:	9b03      	ldr	r3, [sp, #12]
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	9203      	str	r2, [sp, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bfb8      	it	lt
 8003ff6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ffa:	3402      	adds	r4, #2
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040e4 <_vfiprintf_r+0x25c>
 8004002:	7821      	ldrb	r1, [r4, #0]
 8004004:	2203      	movs	r2, #3
 8004006:	4650      	mov	r0, sl
 8004008:	f7fc f90a 	bl	8000220 <memchr>
 800400c:	b140      	cbz	r0, 8004020 <_vfiprintf_r+0x198>
 800400e:	2340      	movs	r3, #64	; 0x40
 8004010:	eba0 000a 	sub.w	r0, r0, sl
 8004014:	fa03 f000 	lsl.w	r0, r3, r0
 8004018:	9b04      	ldr	r3, [sp, #16]
 800401a:	4303      	orrs	r3, r0
 800401c:	3401      	adds	r4, #1
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	482c      	ldr	r0, [pc, #176]	; (80040d8 <_vfiprintf_r+0x250>)
 8004026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800402a:	2206      	movs	r2, #6
 800402c:	f7fc f8f8 	bl	8000220 <memchr>
 8004030:	2800      	cmp	r0, #0
 8004032:	d03f      	beq.n	80040b4 <_vfiprintf_r+0x22c>
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <_vfiprintf_r+0x254>)
 8004036:	bb1b      	cbnz	r3, 8004080 <_vfiprintf_r+0x1f8>
 8004038:	9b03      	ldr	r3, [sp, #12]
 800403a:	3307      	adds	r3, #7
 800403c:	f023 0307 	bic.w	r3, r3, #7
 8004040:	3308      	adds	r3, #8
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004046:	443b      	add	r3, r7
 8004048:	9309      	str	r3, [sp, #36]	; 0x24
 800404a:	e767      	b.n	8003f1c <_vfiprintf_r+0x94>
 800404c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004050:	460c      	mov	r4, r1
 8004052:	2001      	movs	r0, #1
 8004054:	e7a5      	b.n	8003fa2 <_vfiprintf_r+0x11a>
 8004056:	2300      	movs	r3, #0
 8004058:	3401      	adds	r4, #1
 800405a:	9305      	str	r3, [sp, #20]
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0c0a 	mov.w	ip, #10
 8004062:	4620      	mov	r0, r4
 8004064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004068:	3a30      	subs	r2, #48	; 0x30
 800406a:	2a09      	cmp	r2, #9
 800406c:	d903      	bls.n	8004076 <_vfiprintf_r+0x1ee>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0c5      	beq.n	8003ffe <_vfiprintf_r+0x176>
 8004072:	9105      	str	r1, [sp, #20]
 8004074:	e7c3      	b.n	8003ffe <_vfiprintf_r+0x176>
 8004076:	fb0c 2101 	mla	r1, ip, r1, r2
 800407a:	4604      	mov	r4, r0
 800407c:	2301      	movs	r3, #1
 800407e:	e7f0      	b.n	8004062 <_vfiprintf_r+0x1da>
 8004080:	ab03      	add	r3, sp, #12
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	462a      	mov	r2, r5
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <_vfiprintf_r+0x258>)
 8004088:	a904      	add	r1, sp, #16
 800408a:	4630      	mov	r0, r6
 800408c:	f3af 8000 	nop.w
 8004090:	4607      	mov	r7, r0
 8004092:	1c78      	adds	r0, r7, #1
 8004094:	d1d6      	bne.n	8004044 <_vfiprintf_r+0x1bc>
 8004096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004098:	07d9      	lsls	r1, r3, #31
 800409a:	d405      	bmi.n	80040a8 <_vfiprintf_r+0x220>
 800409c:	89ab      	ldrh	r3, [r5, #12]
 800409e:	059a      	lsls	r2, r3, #22
 80040a0:	d402      	bmi.n	80040a8 <_vfiprintf_r+0x220>
 80040a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a4:	f7ff fdaf 	bl	8003c06 <__retarget_lock_release_recursive>
 80040a8:	89ab      	ldrh	r3, [r5, #12]
 80040aa:	065b      	lsls	r3, r3, #25
 80040ac:	f53f af12 	bmi.w	8003ed4 <_vfiprintf_r+0x4c>
 80040b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b2:	e711      	b.n	8003ed8 <_vfiprintf_r+0x50>
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	462a      	mov	r2, r5
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <_vfiprintf_r+0x258>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 f880 	bl	80041c4 <_printf_i>
 80040c4:	e7e4      	b.n	8004090 <_vfiprintf_r+0x208>
 80040c6:	bf00      	nop
 80040c8:	08004844 	.word	0x08004844
 80040cc:	08004864 	.word	0x08004864
 80040d0:	08004824 	.word	0x08004824
 80040d4:	08004884 	.word	0x08004884
 80040d8:	0800488e 	.word	0x0800488e
 80040dc:	00000000 	.word	0x00000000
 80040e0:	08003e63 	.word	0x08003e63
 80040e4:	0800488a 	.word	0x0800488a

080040e8 <_printf_common>:
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	4616      	mov	r6, r2
 80040ee:	4699      	mov	r9, r3
 80040f0:	688a      	ldr	r2, [r1, #8]
 80040f2:	690b      	ldr	r3, [r1, #16]
 80040f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfb8      	it	lt
 80040fc:	4613      	movlt	r3, r2
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004104:	4607      	mov	r7, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b10a      	cbz	r2, 800410e <_printf_common+0x26>
 800410a:	3301      	adds	r3, #1
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	0699      	lsls	r1, r3, #26
 8004112:	bf42      	ittt	mi
 8004114:	6833      	ldrmi	r3, [r6, #0]
 8004116:	3302      	addmi	r3, #2
 8004118:	6033      	strmi	r3, [r6, #0]
 800411a:	6825      	ldr	r5, [r4, #0]
 800411c:	f015 0506 	ands.w	r5, r5, #6
 8004120:	d106      	bne.n	8004130 <_printf_common+0x48>
 8004122:	f104 0a19 	add.w	sl, r4, #25
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	42ab      	cmp	r3, r5
 800412e:	dc26      	bgt.n	800417e <_printf_common+0x96>
 8004130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004134:	1e13      	subs	r3, r2, #0
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	bf18      	it	ne
 800413a:	2301      	movne	r3, #1
 800413c:	0692      	lsls	r2, r2, #26
 800413e:	d42b      	bmi.n	8004198 <_printf_common+0xb0>
 8004140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004144:	4649      	mov	r1, r9
 8004146:	4638      	mov	r0, r7
 8004148:	47c0      	blx	r8
 800414a:	3001      	adds	r0, #1
 800414c:	d01e      	beq.n	800418c <_printf_common+0xa4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	68e5      	ldr	r5, [r4, #12]
 8004152:	6832      	ldr	r2, [r6, #0]
 8004154:	f003 0306 	and.w	r3, r3, #6
 8004158:	2b04      	cmp	r3, #4
 800415a:	bf08      	it	eq
 800415c:	1aad      	subeq	r5, r5, r2
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	bf0c      	ite	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	2500      	movne	r5, #0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfc4      	itt	gt
 800416e:	1a9b      	subgt	r3, r3, r2
 8004170:	18ed      	addgt	r5, r5, r3
 8004172:	2600      	movs	r6, #0
 8004174:	341a      	adds	r4, #26
 8004176:	42b5      	cmp	r5, r6
 8004178:	d11a      	bne.n	80041b0 <_printf_common+0xc8>
 800417a:	2000      	movs	r0, #0
 800417c:	e008      	b.n	8004190 <_printf_common+0xa8>
 800417e:	2301      	movs	r3, #1
 8004180:	4652      	mov	r2, sl
 8004182:	4649      	mov	r1, r9
 8004184:	4638      	mov	r0, r7
 8004186:	47c0      	blx	r8
 8004188:	3001      	adds	r0, #1
 800418a:	d103      	bne.n	8004194 <_printf_common+0xac>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004194:	3501      	adds	r5, #1
 8004196:	e7c6      	b.n	8004126 <_printf_common+0x3e>
 8004198:	18e1      	adds	r1, r4, r3
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	2030      	movs	r0, #48	; 0x30
 800419e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a2:	4422      	add	r2, r4
 80041a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ac:	3302      	adds	r3, #2
 80041ae:	e7c7      	b.n	8004140 <_printf_common+0x58>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4622      	mov	r2, r4
 80041b4:	4649      	mov	r1, r9
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c0      	blx	r8
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0e6      	beq.n	800418c <_printf_common+0xa4>
 80041be:	3601      	adds	r6, #1
 80041c0:	e7d9      	b.n	8004176 <_printf_common+0x8e>
	...

080041c4 <_printf_i>:
 80041c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	460c      	mov	r4, r1
 80041ca:	4691      	mov	r9, r2
 80041cc:	7e27      	ldrb	r7, [r4, #24]
 80041ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041d0:	2f78      	cmp	r7, #120	; 0x78
 80041d2:	4680      	mov	r8, r0
 80041d4:	469a      	mov	sl, r3
 80041d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041da:	d807      	bhi.n	80041ec <_printf_i+0x28>
 80041dc:	2f62      	cmp	r7, #98	; 0x62
 80041de:	d80a      	bhi.n	80041f6 <_printf_i+0x32>
 80041e0:	2f00      	cmp	r7, #0
 80041e2:	f000 80d8 	beq.w	8004396 <_printf_i+0x1d2>
 80041e6:	2f58      	cmp	r7, #88	; 0x58
 80041e8:	f000 80a3 	beq.w	8004332 <_printf_i+0x16e>
 80041ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f4:	e03a      	b.n	800426c <_printf_i+0xa8>
 80041f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041fa:	2b15      	cmp	r3, #21
 80041fc:	d8f6      	bhi.n	80041ec <_printf_i+0x28>
 80041fe:	a001      	add	r0, pc, #4	; (adr r0, 8004204 <_printf_i+0x40>)
 8004200:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004204:	0800425d 	.word	0x0800425d
 8004208:	08004271 	.word	0x08004271
 800420c:	080041ed 	.word	0x080041ed
 8004210:	080041ed 	.word	0x080041ed
 8004214:	080041ed 	.word	0x080041ed
 8004218:	080041ed 	.word	0x080041ed
 800421c:	08004271 	.word	0x08004271
 8004220:	080041ed 	.word	0x080041ed
 8004224:	080041ed 	.word	0x080041ed
 8004228:	080041ed 	.word	0x080041ed
 800422c:	080041ed 	.word	0x080041ed
 8004230:	0800437d 	.word	0x0800437d
 8004234:	080042a1 	.word	0x080042a1
 8004238:	0800435f 	.word	0x0800435f
 800423c:	080041ed 	.word	0x080041ed
 8004240:	080041ed 	.word	0x080041ed
 8004244:	0800439f 	.word	0x0800439f
 8004248:	080041ed 	.word	0x080041ed
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080041ed 	.word	0x080041ed
 8004254:	080041ed 	.word	0x080041ed
 8004258:	08004367 	.word	0x08004367
 800425c:	680b      	ldr	r3, [r1, #0]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	600a      	str	r2, [r1, #0]
 8004264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800426c:	2301      	movs	r3, #1
 800426e:	e0a3      	b.n	80043b8 <_printf_i+0x1f4>
 8004270:	6825      	ldr	r5, [r4, #0]
 8004272:	6808      	ldr	r0, [r1, #0]
 8004274:	062e      	lsls	r6, r5, #24
 8004276:	f100 0304 	add.w	r3, r0, #4
 800427a:	d50a      	bpl.n	8004292 <_printf_i+0xce>
 800427c:	6805      	ldr	r5, [r0, #0]
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	2d00      	cmp	r5, #0
 8004282:	da03      	bge.n	800428c <_printf_i+0xc8>
 8004284:	232d      	movs	r3, #45	; 0x2d
 8004286:	426d      	negs	r5, r5
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428c:	485e      	ldr	r0, [pc, #376]	; (8004408 <_printf_i+0x244>)
 800428e:	230a      	movs	r3, #10
 8004290:	e019      	b.n	80042c6 <_printf_i+0x102>
 8004292:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004296:	6805      	ldr	r5, [r0, #0]
 8004298:	600b      	str	r3, [r1, #0]
 800429a:	bf18      	it	ne
 800429c:	b22d      	sxthne	r5, r5
 800429e:	e7ef      	b.n	8004280 <_printf_i+0xbc>
 80042a0:	680b      	ldr	r3, [r1, #0]
 80042a2:	6825      	ldr	r5, [r4, #0]
 80042a4:	1d18      	adds	r0, r3, #4
 80042a6:	6008      	str	r0, [r1, #0]
 80042a8:	0628      	lsls	r0, r5, #24
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0xec>
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <_printf_i+0xf2>
 80042b0:	0669      	lsls	r1, r5, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0xe8>
 80042b4:	881d      	ldrh	r5, [r3, #0]
 80042b6:	4854      	ldr	r0, [pc, #336]	; (8004408 <_printf_i+0x244>)
 80042b8:	2f6f      	cmp	r7, #111	; 0x6f
 80042ba:	bf0c      	ite	eq
 80042bc:	2308      	moveq	r3, #8
 80042be:	230a      	movne	r3, #10
 80042c0:	2100      	movs	r1, #0
 80042c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042c6:	6866      	ldr	r6, [r4, #4]
 80042c8:	60a6      	str	r6, [r4, #8]
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	bfa2      	ittt	ge
 80042ce:	6821      	ldrge	r1, [r4, #0]
 80042d0:	f021 0104 	bicge.w	r1, r1, #4
 80042d4:	6021      	strge	r1, [r4, #0]
 80042d6:	b90d      	cbnz	r5, 80042dc <_printf_i+0x118>
 80042d8:	2e00      	cmp	r6, #0
 80042da:	d04d      	beq.n	8004378 <_printf_i+0x1b4>
 80042dc:	4616      	mov	r6, r2
 80042de:	fbb5 f1f3 	udiv	r1, r5, r3
 80042e2:	fb03 5711 	mls	r7, r3, r1, r5
 80042e6:	5dc7      	ldrb	r7, [r0, r7]
 80042e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042ec:	462f      	mov	r7, r5
 80042ee:	42bb      	cmp	r3, r7
 80042f0:	460d      	mov	r5, r1
 80042f2:	d9f4      	bls.n	80042de <_printf_i+0x11a>
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d10b      	bne.n	8004310 <_printf_i+0x14c>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	07df      	lsls	r7, r3, #31
 80042fc:	d508      	bpl.n	8004310 <_printf_i+0x14c>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6861      	ldr	r1, [r4, #4]
 8004302:	4299      	cmp	r1, r3
 8004304:	bfde      	ittt	le
 8004306:	2330      	movle	r3, #48	; 0x30
 8004308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800430c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004310:	1b92      	subs	r2, r2, r6
 8004312:	6122      	str	r2, [r4, #16]
 8004314:	f8cd a000 	str.w	sl, [sp]
 8004318:	464b      	mov	r3, r9
 800431a:	aa03      	add	r2, sp, #12
 800431c:	4621      	mov	r1, r4
 800431e:	4640      	mov	r0, r8
 8004320:	f7ff fee2 	bl	80040e8 <_printf_common>
 8004324:	3001      	adds	r0, #1
 8004326:	d14c      	bne.n	80043c2 <_printf_i+0x1fe>
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	b004      	add	sp, #16
 800432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004332:	4835      	ldr	r0, [pc, #212]	; (8004408 <_printf_i+0x244>)
 8004334:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	680e      	ldr	r6, [r1, #0]
 800433c:	061f      	lsls	r7, r3, #24
 800433e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004342:	600e      	str	r6, [r1, #0]
 8004344:	d514      	bpl.n	8004370 <_printf_i+0x1ac>
 8004346:	07d9      	lsls	r1, r3, #31
 8004348:	bf44      	itt	mi
 800434a:	f043 0320 	orrmi.w	r3, r3, #32
 800434e:	6023      	strmi	r3, [r4, #0]
 8004350:	b91d      	cbnz	r5, 800435a <_printf_i+0x196>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	f023 0320 	bic.w	r3, r3, #32
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	2310      	movs	r3, #16
 800435c:	e7b0      	b.n	80042c0 <_printf_i+0xfc>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	f043 0320 	orr.w	r3, r3, #32
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	2378      	movs	r3, #120	; 0x78
 8004368:	4828      	ldr	r0, [pc, #160]	; (800440c <_printf_i+0x248>)
 800436a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800436e:	e7e3      	b.n	8004338 <_printf_i+0x174>
 8004370:	065e      	lsls	r6, r3, #25
 8004372:	bf48      	it	mi
 8004374:	b2ad      	uxthmi	r5, r5
 8004376:	e7e6      	b.n	8004346 <_printf_i+0x182>
 8004378:	4616      	mov	r6, r2
 800437a:	e7bb      	b.n	80042f4 <_printf_i+0x130>
 800437c:	680b      	ldr	r3, [r1, #0]
 800437e:	6826      	ldr	r6, [r4, #0]
 8004380:	6960      	ldr	r0, [r4, #20]
 8004382:	1d1d      	adds	r5, r3, #4
 8004384:	600d      	str	r5, [r1, #0]
 8004386:	0635      	lsls	r5, r6, #24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	d501      	bpl.n	8004390 <_printf_i+0x1cc>
 800438c:	6018      	str	r0, [r3, #0]
 800438e:	e002      	b.n	8004396 <_printf_i+0x1d2>
 8004390:	0671      	lsls	r1, r6, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0x1c8>
 8004394:	8018      	strh	r0, [r3, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	4616      	mov	r6, r2
 800439c:	e7ba      	b.n	8004314 <_printf_i+0x150>
 800439e:	680b      	ldr	r3, [r1, #0]
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	600a      	str	r2, [r1, #0]
 80043a4:	681e      	ldr	r6, [r3, #0]
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	2100      	movs	r1, #0
 80043aa:	4630      	mov	r0, r6
 80043ac:	f7fb ff38 	bl	8000220 <memchr>
 80043b0:	b108      	cbz	r0, 80043b6 <_printf_i+0x1f2>
 80043b2:	1b80      	subs	r0, r0, r6
 80043b4:	6060      	str	r0, [r4, #4]
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	2300      	movs	r3, #0
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c0:	e7a8      	b.n	8004314 <_printf_i+0x150>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	4632      	mov	r2, r6
 80043c6:	4649      	mov	r1, r9
 80043c8:	4640      	mov	r0, r8
 80043ca:	47d0      	blx	sl
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0ab      	beq.n	8004328 <_printf_i+0x164>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	079b      	lsls	r3, r3, #30
 80043d4:	d413      	bmi.n	80043fe <_printf_i+0x23a>
 80043d6:	68e0      	ldr	r0, [r4, #12]
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	4298      	cmp	r0, r3
 80043dc:	bfb8      	it	lt
 80043de:	4618      	movlt	r0, r3
 80043e0:	e7a4      	b.n	800432c <_printf_i+0x168>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4632      	mov	r2, r6
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d09b      	beq.n	8004328 <_printf_i+0x164>
 80043f0:	3501      	adds	r5, #1
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	9903      	ldr	r1, [sp, #12]
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dcf2      	bgt.n	80043e2 <_printf_i+0x21e>
 80043fc:	e7eb      	b.n	80043d6 <_printf_i+0x212>
 80043fe:	2500      	movs	r5, #0
 8004400:	f104 0619 	add.w	r6, r4, #25
 8004404:	e7f5      	b.n	80043f2 <_printf_i+0x22e>
 8004406:	bf00      	nop
 8004408:	08004895 	.word	0x08004895
 800440c:	080048a6 	.word	0x080048a6

08004410 <_sbrk_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d06      	ldr	r5, [pc, #24]	; (800442c <_sbrk_r+0x1c>)
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	4608      	mov	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7fd ff9c 	bl	8002358 <_sbrk>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_sbrk_r+0x1a>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_sbrk_r+0x1a>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	20000174 	.word	0x20000174

08004430 <__sread>:
 8004430:	b510      	push	{r4, lr}
 8004432:	460c      	mov	r4, r1
 8004434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004438:	f000 f8a0 	bl	800457c <_read_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	bfab      	itete	ge
 8004440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004442:	89a3      	ldrhlt	r3, [r4, #12]
 8004444:	181b      	addge	r3, r3, r0
 8004446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800444a:	bfac      	ite	ge
 800444c:	6563      	strge	r3, [r4, #84]	; 0x54
 800444e:	81a3      	strhlt	r3, [r4, #12]
 8004450:	bd10      	pop	{r4, pc}

08004452 <__swrite>:
 8004452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	461f      	mov	r7, r3
 8004458:	898b      	ldrh	r3, [r1, #12]
 800445a:	05db      	lsls	r3, r3, #23
 800445c:	4605      	mov	r5, r0
 800445e:	460c      	mov	r4, r1
 8004460:	4616      	mov	r6, r2
 8004462:	d505      	bpl.n	8004470 <__swrite+0x1e>
 8004464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004468:	2302      	movs	r3, #2
 800446a:	2200      	movs	r2, #0
 800446c:	f000 f868 	bl	8004540 <_lseek_r>
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	4632      	mov	r2, r6
 800447e:	463b      	mov	r3, r7
 8004480:	4628      	mov	r0, r5
 8004482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004486:	f000 b817 	b.w	80044b8 <_write_r>

0800448a <__sseek>:
 800448a:	b510      	push	{r4, lr}
 800448c:	460c      	mov	r4, r1
 800448e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004492:	f000 f855 	bl	8004540 <_lseek_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	bf15      	itete	ne
 800449c:	6560      	strne	r0, [r4, #84]	; 0x54
 800449e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044a6:	81a3      	strheq	r3, [r4, #12]
 80044a8:	bf18      	it	ne
 80044aa:	81a3      	strhne	r3, [r4, #12]
 80044ac:	bd10      	pop	{r4, pc}

080044ae <__sclose>:
 80044ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b2:	f000 b813 	b.w	80044dc <_close_r>
	...

080044b8 <_write_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d07      	ldr	r5, [pc, #28]	; (80044d8 <_write_r+0x20>)
 80044bc:	4604      	mov	r4, r0
 80044be:	4608      	mov	r0, r1
 80044c0:	4611      	mov	r1, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7fd fef5 	bl	80022b6 <_write>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_write_r+0x1e>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_write_r+0x1e>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	20000174 	.word	0x20000174

080044dc <_close_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d06      	ldr	r5, [pc, #24]	; (80044f8 <_close_r+0x1c>)
 80044e0:	2300      	movs	r3, #0
 80044e2:	4604      	mov	r4, r0
 80044e4:	4608      	mov	r0, r1
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	f7fd ff01 	bl	80022ee <_close>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d102      	bne.n	80044f6 <_close_r+0x1a>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	b103      	cbz	r3, 80044f6 <_close_r+0x1a>
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
 80044f8:	20000174 	.word	0x20000174

080044fc <_fstat_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d07      	ldr	r5, [pc, #28]	; (800451c <_fstat_r+0x20>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	f7fd fefc 	bl	8002306 <_fstat>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d102      	bne.n	8004518 <_fstat_r+0x1c>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b103      	cbz	r3, 8004518 <_fstat_r+0x1c>
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	bd38      	pop	{r3, r4, r5, pc}
 800451a:	bf00      	nop
 800451c:	20000174 	.word	0x20000174

08004520 <_isatty_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d06      	ldr	r5, [pc, #24]	; (800453c <_isatty_r+0x1c>)
 8004524:	2300      	movs	r3, #0
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fd fefb 	bl	8002326 <_isatty>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_isatty_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_isatty_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000174 	.word	0x20000174

08004540 <_lseek_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d07      	ldr	r5, [pc, #28]	; (8004560 <_lseek_r+0x20>)
 8004544:	4604      	mov	r4, r0
 8004546:	4608      	mov	r0, r1
 8004548:	4611      	mov	r1, r2
 800454a:	2200      	movs	r2, #0
 800454c:	602a      	str	r2, [r5, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f7fd fef4 	bl	800233c <_lseek>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_lseek_r+0x1e>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_lseek_r+0x1e>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000174 	.word	0x20000174

08004564 <__malloc_lock>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__malloc_lock+0x8>)
 8004566:	f7ff bb4d 	b.w	8003c04 <__retarget_lock_acquire_recursive>
 800456a:	bf00      	nop
 800456c:	2000016c 	.word	0x2000016c

08004570 <__malloc_unlock>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__malloc_unlock+0x8>)
 8004572:	f7ff bb48 	b.w	8003c06 <__retarget_lock_release_recursive>
 8004576:	bf00      	nop
 8004578:	2000016c 	.word	0x2000016c

0800457c <_read_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d07      	ldr	r5, [pc, #28]	; (800459c <_read_r+0x20>)
 8004580:	4604      	mov	r4, r0
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	2200      	movs	r2, #0
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f7fd fe76 	bl	800227c <_read>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_read_r+0x1e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_read_r+0x1e>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	20000174 	.word	0x20000174

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
